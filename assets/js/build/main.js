/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/js/main.js":
/*!***************************!*\
  !*** ./assets/js/main.js ***!
  \***************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! identity-style-guide */ \"./node_modules/uswds/src/js/components/accordion.js\");\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(identity_style_guide__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! identity-style-guide */ \"./node_modules/uswds/src/js/components/banner.js\");\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(identity_style_guide__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! identity-style-guide */ \"./node_modules/uswds/src/js/components/combo-box.js\");\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(identity_style_guide__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! identity-style-guide */ \"./node_modules/uswds/src/js/components/date-picker.js\");\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(identity_style_guide__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! identity-style-guide */ \"./node_modules/uswds/src/js/components/navigation.js\");\n/* harmony import */ var identity_style_guide__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(identity_style_guide__WEBPACK_IMPORTED_MODULE_4__);\n\nconst components = [(identity_style_guide__WEBPACK_IMPORTED_MODULE_0___default()), (identity_style_guide__WEBPACK_IMPORTED_MODULE_1___default()), (identity_style_guide__WEBPACK_IMPORTED_MODULE_2___default()), (identity_style_guide__WEBPACK_IMPORTED_MODULE_3___default()), (identity_style_guide__WEBPACK_IMPORTED_MODULE_4___default())];\ncomponents.forEach(component => component.on());\n\n//# sourceURL=webpack://identity-site/./assets/js/main.js?");

/***/ }),

/***/ "./node_modules/receptor/behavior/index.js":
/*!*************************************************!*\
  !*** ./node_modules/receptor/behavior/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\nconst delegate = __webpack_require__(/*! ../delegate */ \"./node_modules/receptor/delegate/index.js\");\n\nconst delegateAll = __webpack_require__(/*! ../delegateAll */ \"./node_modules/receptor/delegateAll/index.js\");\n\nconst DELEGATE_PATTERN = /^(.+):delegate\\((.+)\\)$/;\nconst SPACE = ' ';\n\nconst getListeners = function (type, handler) {\n  var match = type.match(DELEGATE_PATTERN);\n  var selector;\n\n  if (match) {\n    type = match[1];\n    selector = match[2];\n  }\n\n  var options;\n\n  if (typeof handler === 'object') {\n    options = {\n      capture: popKey(handler, 'capture'),\n      passive: popKey(handler, 'passive')\n    };\n  }\n\n  var listener = {\n    selector: selector,\n    delegate: typeof handler === 'object' ? delegateAll(handler) : selector ? delegate(selector, handler) : handler,\n    options: options\n  };\n\n  if (type.indexOf(SPACE) > -1) {\n    return type.split(SPACE).map(function (_type) {\n      return assign({\n        type: _type\n      }, listener);\n    });\n  } else {\n    listener.type = type;\n    return [listener];\n  }\n};\n\nvar popKey = function (obj, key) {\n  var value = obj[key];\n  delete obj[key];\n  return value;\n};\n\nmodule.exports = function behavior(events, props) {\n  const listeners = Object.keys(events).reduce(function (memo, type) {\n    var listeners = getListeners(type, events[type]);\n    return memo.concat(listeners);\n  }, []);\n  return assign({\n    add: function addBehavior(element) {\n      listeners.forEach(function (listener) {\n        element.addEventListener(listener.type, listener.delegate, listener.options);\n      });\n    },\n    remove: function removeBehavior(element) {\n      listeners.forEach(function (listener) {\n        element.removeEventListener(listener.type, listener.delegate, listener.options);\n      });\n    }\n  }, props);\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/behavior/index.js?");

/***/ }),

/***/ "./node_modules/receptor/compose/index.js":
/*!************************************************!*\
  !*** ./node_modules/receptor/compose/index.js ***!
  \************************************************/
/***/ (function(module) {

eval("module.exports = function compose(functions) {\n  return function (e) {\n    return functions.some(function (fn) {\n      return fn.call(this, e) === false;\n    }, this);\n  };\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/compose/index.js?");

/***/ }),

/***/ "./node_modules/receptor/delegate/index.js":
/*!*************************************************!*\
  !*** ./node_modules/receptor/delegate/index.js ***!
  \*************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// polyfill Element.prototype.closest\n__webpack_require__(/*! element-closest */ \"./node_modules/element-closest/element-closest.js\");\n\nmodule.exports = function delegate(selector, fn) {\n  return function delegation(event) {\n    var target = event.target.closest(selector);\n\n    if (target) {\n      return fn.call(target, event);\n    }\n  };\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/delegate/index.js?");

/***/ }),

/***/ "./node_modules/receptor/delegateAll/index.js":
/*!****************************************************!*\
  !*** ./node_modules/receptor/delegateAll/index.js ***!
  \****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const delegate = __webpack_require__(/*! ../delegate */ \"./node_modules/receptor/delegate/index.js\");\n\nconst compose = __webpack_require__(/*! ../compose */ \"./node_modules/receptor/compose/index.js\");\n\nconst SPLAT = '*';\n\nmodule.exports = function delegateAll(selectors) {\n  const keys = Object.keys(selectors); // XXX optimization: if there is only one handler and it applies to\n  // all elements (the \"*\" CSS selector), then just return that\n  // handler\n\n  if (keys.length === 1 && keys[0] === SPLAT) {\n    return selectors[SPLAT];\n  }\n\n  const delegates = keys.reduce(function (memo, selector) {\n    memo.push(delegate(selector, selectors[selector]));\n    return memo;\n  }, []);\n  return compose(delegates);\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/delegateAll/index.js?");

/***/ }),

/***/ "./node_modules/receptor/ignore/index.js":
/*!***********************************************!*\
  !*** ./node_modules/receptor/ignore/index.js ***!
  \***********************************************/
/***/ (function(module) {

eval("module.exports = function ignore(element, fn) {\n  return function ignorance(e) {\n    if (element !== e.target && !element.contains(e.target)) {\n      return fn.call(this, e);\n    }\n  };\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/ignore/index.js?");

/***/ }),

/***/ "./node_modules/receptor/index.js":
/*!****************************************!*\
  !*** ./node_modules/receptor/index.js ***!
  \****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("module.exports = {\n  behavior: __webpack_require__(/*! ./behavior */ \"./node_modules/receptor/behavior/index.js\"),\n  delegate: __webpack_require__(/*! ./delegate */ \"./node_modules/receptor/delegate/index.js\"),\n  delegateAll: __webpack_require__(/*! ./delegateAll */ \"./node_modules/receptor/delegateAll/index.js\"),\n  ignore: __webpack_require__(/*! ./ignore */ \"./node_modules/receptor/ignore/index.js\"),\n  keymap: __webpack_require__(/*! ./keymap */ \"./node_modules/receptor/keymap/index.js\")\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/index.js?");

/***/ }),

/***/ "./node_modules/receptor/keymap/index.js":
/*!***********************************************!*\
  !*** ./node_modules/receptor/keymap/index.js ***!
  \***********************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("__webpack_require__(/*! keyboardevent-key-polyfill */ \"./node_modules/keyboardevent-key-polyfill/index.js\"); // these are the only relevant modifiers supported on all platforms,\n// according to MDN:\n// <https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState>\n\n\nconst MODIFIERS = {\n  'Alt': 'altKey',\n  'Control': 'ctrlKey',\n  'Ctrl': 'ctrlKey',\n  'Shift': 'shiftKey'\n};\nconst MODIFIER_SEPARATOR = '+';\n\nconst getEventKey = function (event, hasModifiers) {\n  var key = event.key;\n\n  if (hasModifiers) {\n    for (var modifier in MODIFIERS) {\n      if (event[MODIFIERS[modifier]] === true) {\n        key = [modifier, key].join(MODIFIER_SEPARATOR);\n      }\n    }\n  }\n\n  return key;\n};\n\nmodule.exports = function keymap(keys) {\n  const hasModifiers = Object.keys(keys).some(function (key) {\n    return key.indexOf(MODIFIER_SEPARATOR) > -1;\n  });\n  return function (event) {\n    var key = getEventKey(event, hasModifiers);\n    return [key, key.toLowerCase()].reduce(function (result, _key) {\n      if (_key in keys) {\n        result = keys[key].call(this, event);\n      }\n\n      return result;\n    }, undefined);\n  };\n};\n\nmodule.exports.MODIFIERS = MODIFIERS;\n\n//# sourceURL=webpack://identity-site/./node_modules/receptor/keymap/index.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/components/accordion.js":
/*!***********************************************************!*\
  !*** ./node_modules/uswds/src/js/components/accordion.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const select = __webpack_require__(/*! ../utils/select */ \"./node_modules/uswds/src/js/utils/select.js\");\n\nconst behavior = __webpack_require__(/*! ../utils/behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst toggle = __webpack_require__(/*! ../utils/toggle */ \"./node_modules/uswds/src/js/utils/toggle.js\");\n\nconst isElementInViewport = __webpack_require__(/*! ../utils/is-in-viewport */ \"./node_modules/uswds/src/js/utils/is-in-viewport.js\");\n\nconst {\n  CLICK\n} = __webpack_require__(/*! ../events */ \"./node_modules/uswds/src/js/events.js\");\n\nconst {\n  prefix: PREFIX\n} = __webpack_require__(/*! ../config */ \"./node_modules/uswds/src/js/config.js\");\n\nconst ACCORDION = `.${PREFIX}-accordion, .${PREFIX}-accordion--bordered`;\nconst BUTTON = `.${PREFIX}-accordion__button[aria-controls]`;\nconst EXPANDED = \"aria-expanded\";\nconst MULTISELECTABLE = \"aria-multiselectable\";\n/**\n * Get an Array of button elements belonging directly to the given\n * accordion element.\n * @param {HTMLElement} accordion\n * @return {array<HTMLButtonElement>}\n */\n\nconst getAccordionButtons = accordion => {\n  const buttons = select(BUTTON, accordion);\n  return buttons.filter(button => button.closest(ACCORDION) === accordion);\n};\n/**\n * Toggle a button's \"pressed\" state, optionally providing a target\n * state.\n *\n * @param {HTMLButtonElement} button\n * @param {boolean?} expanded If no state is provided, the current\n * state will be toggled (from false to true, and vice-versa).\n * @return {boolean} the resulting state\n */\n\n\nconst toggleButton = (button, expanded) => {\n  const accordion = button.closest(ACCORDION);\n  let safeExpanded = expanded;\n\n  if (!accordion) {\n    throw new Error(`${BUTTON} is missing outer ${ACCORDION}`);\n  }\n\n  safeExpanded = toggle(button, expanded); // XXX multiselectable is opt-in, to preserve legacy behavior\n\n  const multiselectable = accordion.getAttribute(MULTISELECTABLE) === \"true\";\n\n  if (safeExpanded && !multiselectable) {\n    getAccordionButtons(accordion).forEach(other => {\n      if (other !== button) {\n        toggle(other, false);\n      }\n    });\n  }\n};\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} true\n */\n\n\nconst showButton = button => toggleButton(button, true);\n/**\n * @param {HTMLButtonElement} button\n * @return {boolean} false\n */\n\n\nconst hideButton = button => toggleButton(button, false);\n\nconst accordion = behavior({\n  [CLICK]: {\n    [BUTTON](event) {\n      event.preventDefault();\n      toggleButton(this);\n\n      if (this.getAttribute(EXPANDED) === \"true\") {\n        // We were just expanded, but if another accordion was also just\n        // collapsed, we may no longer be in the viewport. This ensures\n        // that we are still visible, so the user isn't confused.\n        if (!isElementInViewport(this)) this.scrollIntoView();\n      }\n    }\n\n  }\n}, {\n  init(root) {\n    select(BUTTON, root).forEach(button => {\n      const expanded = button.getAttribute(EXPANDED) === \"true\";\n      toggleButton(button, expanded);\n    });\n  },\n\n  ACCORDION,\n  BUTTON,\n  show: showButton,\n  hide: hideButton,\n  toggle: toggleButton,\n  getButtons: getAccordionButtons\n});\nmodule.exports = accordion;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/components/accordion.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/components/banner.js":
/*!********************************************************!*\
  !*** ./node_modules/uswds/src/js/components/banner.js ***!
  \********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const behavior = __webpack_require__(/*! ../utils/behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst {\n  CLICK\n} = __webpack_require__(/*! ../events */ \"./node_modules/uswds/src/js/events.js\");\n\nconst {\n  prefix: PREFIX\n} = __webpack_require__(/*! ../config */ \"./node_modules/uswds/src/js/config.js\");\n\nconst HEADER = `.${PREFIX}-banner__header`;\nconst EXPANDED_CLASS = `${PREFIX}-banner__header--expanded`;\n\nconst toggleBanner = function toggleEl(event) {\n  event.preventDefault();\n  this.closest(HEADER).classList.toggle(EXPANDED_CLASS);\n};\n\nmodule.exports = behavior({\n  [CLICK]: {\n    [`${HEADER} [aria-controls]`]: toggleBanner\n  }\n});\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/components/banner.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/components/combo-box.js":
/*!***********************************************************!*\
  !*** ./node_modules/uswds/src/js/components/combo-box.js ***!
  \***********************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const keymap = __webpack_require__(/*! receptor/keymap */ \"./node_modules/receptor/keymap/index.js\");\n\nconst select = __webpack_require__(/*! ../utils/select */ \"./node_modules/uswds/src/js/utils/select.js\");\n\nconst behavior = __webpack_require__(/*! ../utils/behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst Sanitizer = __webpack_require__(/*! ../utils/sanitizer */ \"./node_modules/uswds/src/js/utils/sanitizer.js\");\n\nconst {\n  prefix: PREFIX\n} = __webpack_require__(/*! ../config */ \"./node_modules/uswds/src/js/config.js\");\n\nconst {\n  CLICK\n} = __webpack_require__(/*! ../events */ \"./node_modules/uswds/src/js/events.js\");\n\nconst COMBO_BOX_CLASS = `${PREFIX}-combo-box`;\nconst COMBO_BOX_PRISTINE_CLASS = `${COMBO_BOX_CLASS}--pristine`;\nconst SELECT_CLASS = `${COMBO_BOX_CLASS}__select`;\nconst INPUT_CLASS = `${COMBO_BOX_CLASS}__input`;\nconst CLEAR_INPUT_BUTTON_CLASS = `${COMBO_BOX_CLASS}__clear-input`;\nconst CLEAR_INPUT_BUTTON_WRAPPER_CLASS = `${CLEAR_INPUT_BUTTON_CLASS}__wrapper`;\nconst INPUT_BUTTON_SEPARATOR_CLASS = `${COMBO_BOX_CLASS}__input-button-separator`;\nconst TOGGLE_LIST_BUTTON_CLASS = `${COMBO_BOX_CLASS}__toggle-list`;\nconst TOGGLE_LIST_BUTTON_WRAPPER_CLASS = `${TOGGLE_LIST_BUTTON_CLASS}__wrapper`;\nconst LIST_CLASS = `${COMBO_BOX_CLASS}__list`;\nconst LIST_OPTION_CLASS = `${COMBO_BOX_CLASS}__list-option`;\nconst LIST_OPTION_FOCUSED_CLASS = `${LIST_OPTION_CLASS}--focused`;\nconst LIST_OPTION_SELECTED_CLASS = `${LIST_OPTION_CLASS}--selected`;\nconst STATUS_CLASS = `${COMBO_BOX_CLASS}__status`;\nconst COMBO_BOX = `.${COMBO_BOX_CLASS}`;\nconst SELECT = `.${SELECT_CLASS}`;\nconst INPUT = `.${INPUT_CLASS}`;\nconst CLEAR_INPUT_BUTTON = `.${CLEAR_INPUT_BUTTON_CLASS}`;\nconst TOGGLE_LIST_BUTTON = `.${TOGGLE_LIST_BUTTON_CLASS}`;\nconst LIST = `.${LIST_CLASS}`;\nconst LIST_OPTION = `.${LIST_OPTION_CLASS}`;\nconst LIST_OPTION_FOCUSED = `.${LIST_OPTION_FOCUSED_CLASS}`;\nconst LIST_OPTION_SELECTED = `.${LIST_OPTION_SELECTED_CLASS}`;\nconst STATUS = `.${STATUS_CLASS}`;\nconst DEFAULT_FILTER = \".*{{query}}.*\";\n\nconst noop = () => {};\n/**\n * set the value of the element and dispatch a change event\n *\n * @param {HTMLInputElement|HTMLSelectElement} el The element to update\n * @param {string} value The new value of the element\n */\n\n\nconst changeElementValue = (el, value = \"\") => {\n  const elementToChange = el;\n  elementToChange.value = value;\n  const event = new CustomEvent(\"change\", {\n    bubbles: true,\n    cancelable: true,\n    detail: {\n      value\n    }\n  });\n  elementToChange.dispatchEvent(event);\n};\n/**\n * The elements within the combo box.\n * @typedef {Object} ComboBoxContext\n * @property {HTMLElement} comboBoxEl\n * @property {HTMLSelectElement} selectEl\n * @property {HTMLInputElement} inputEl\n * @property {HTMLUListElement} listEl\n * @property {HTMLDivElement} statusEl\n * @property {HTMLLIElement} focusedOptionEl\n * @property {HTMLLIElement} selectedOptionEl\n * @property {HTMLButtonElement} toggleListBtnEl\n * @property {HTMLButtonElement} clearInputBtnEl\n * @property {boolean} isPristine\n * @property {boolean} disableFiltering\n */\n\n/**\n * Get an object of elements belonging directly to the given\n * combo box component.\n *\n * @param {HTMLElement} el the element within the combo box\n * @returns {ComboBoxContext} elements\n */\n\n\nconst getComboBoxContext = el => {\n  const comboBoxEl = el.closest(COMBO_BOX);\n\n  if (!comboBoxEl) {\n    throw new Error(`Element is missing outer ${COMBO_BOX}`);\n  }\n\n  const selectEl = comboBoxEl.querySelector(SELECT);\n  const inputEl = comboBoxEl.querySelector(INPUT);\n  const listEl = comboBoxEl.querySelector(LIST);\n  const statusEl = comboBoxEl.querySelector(STATUS);\n  const focusedOptionEl = comboBoxEl.querySelector(LIST_OPTION_FOCUSED);\n  const selectedOptionEl = comboBoxEl.querySelector(LIST_OPTION_SELECTED);\n  const toggleListBtnEl = comboBoxEl.querySelector(TOGGLE_LIST_BUTTON);\n  const clearInputBtnEl = comboBoxEl.querySelector(CLEAR_INPUT_BUTTON);\n  const isPristine = comboBoxEl.classList.contains(COMBO_BOX_PRISTINE_CLASS);\n  const disableFiltering = comboBoxEl.dataset.disableFiltering === \"true\";\n  return {\n    comboBoxEl,\n    selectEl,\n    inputEl,\n    listEl,\n    statusEl,\n    focusedOptionEl,\n    selectedOptionEl,\n    toggleListBtnEl,\n    clearInputBtnEl,\n    isPristine,\n    disableFiltering\n  };\n};\n/**\n * Disable the combo-box component\n *\n * @param {HTMLInputElement} el An element within the combo box component\n */\n\n\nconst disable = el => {\n  const {\n    inputEl,\n    toggleListBtnEl,\n    clearInputBtnEl\n  } = getComboBoxContext(el);\n  clearInputBtnEl.hidden = true;\n  clearInputBtnEl.disabled = true;\n  toggleListBtnEl.disabled = true;\n  inputEl.disabled = true;\n};\n/**\n * Enable the combo-box component\n *\n * @param {HTMLInputElement} el An element within the combo box component\n */\n\n\nconst enable = el => {\n  const {\n    inputEl,\n    toggleListBtnEl,\n    clearInputBtnEl\n  } = getComboBoxContext(el);\n  clearInputBtnEl.hidden = false;\n  clearInputBtnEl.disabled = false;\n  toggleListBtnEl.disabled = false;\n  inputEl.disabled = false;\n};\n/**\n * Enhance a select element into a combo box component.\n *\n * @param {HTMLElement} _comboBoxEl The initial element of the combo box component\n */\n\n\nconst enhanceComboBox = _comboBoxEl => {\n  const comboBoxEl = _comboBoxEl.closest(COMBO_BOX);\n\n  if (comboBoxEl.dataset.enhanced) return;\n  const selectEl = comboBoxEl.querySelector(\"select\");\n\n  if (!selectEl) {\n    throw new Error(`${COMBO_BOX} is missing inner select`);\n  }\n\n  const selectId = selectEl.id;\n  const selectLabel = document.querySelector(`label[for=\"${selectId}\"]`);\n  const listId = `${selectId}--list`;\n  const listIdLabel = `${selectId}-label`;\n  const assistiveHintID = `${selectId}--assistiveHint`;\n  const additionalAttributes = [];\n  const {\n    defaultValue\n  } = comboBoxEl.dataset;\n  const {\n    placeholder\n  } = comboBoxEl.dataset;\n  let selectedOption;\n\n  if (placeholder) {\n    additionalAttributes.push({\n      placeholder\n    });\n  }\n\n  if (defaultValue) {\n    for (let i = 0, len = selectEl.options.length; i < len; i += 1) {\n      const optionEl = selectEl.options[i];\n\n      if (optionEl.value === defaultValue) {\n        selectedOption = optionEl;\n        break;\n      }\n    }\n  }\n  /**\n   * Throw error if combobox is missing a label or label is missing\n   * `for` attribute. Otherwise, set the ID to match the <ul> aria-labelledby\n   */\n\n\n  if (!selectLabel || !selectLabel.matches(`label[for=\"${selectId}\"]`)) {\n    throw new Error(`${COMBO_BOX} for ${selectId} is either missing a label or a \"for\" attribute`);\n  } else {\n    selectLabel.setAttribute(\"id\", listIdLabel);\n  }\n\n  selectLabel.setAttribute(\"id\", listIdLabel);\n  selectEl.setAttribute(\"aria-hidden\", \"true\");\n  selectEl.setAttribute(\"tabindex\", \"-1\");\n  selectEl.classList.add(\"usa-sr-only\", SELECT_CLASS);\n  selectEl.id = \"\";\n  selectEl.value = \"\";\n  [\"required\", \"aria-label\", \"aria-labelledby\"].forEach(name => {\n    if (selectEl.hasAttribute(name)) {\n      const value = selectEl.getAttribute(name);\n      additionalAttributes.push({\n        [name]: value\n      });\n      selectEl.removeAttribute(name);\n    }\n  }); // sanitize doesn't like functions in template literals\n\n  const input = document.createElement(\"input\");\n  input.setAttribute(\"id\", selectId);\n  input.setAttribute(\"aria-owns\", listId);\n  input.setAttribute(\"aria-controls\", listId);\n  input.setAttribute(\"aria-autocomplete\", \"list\");\n  input.setAttribute(\"aria-describedby\", assistiveHintID);\n  input.setAttribute(\"aria-expanded\", \"false\");\n  input.setAttribute(\"autocapitalize\", \"off\");\n  input.setAttribute(\"autocomplete\", \"off\");\n  input.setAttribute(\"class\", INPUT_CLASS);\n  input.setAttribute(\"type\", \"text\");\n  input.setAttribute(\"role\", \"combobox\");\n  additionalAttributes.forEach(attr => Object.keys(attr).forEach(key => {\n    const value = Sanitizer.escapeHTML`${attr[key]}`;\n    input.setAttribute(key, value);\n  }));\n  comboBoxEl.insertAdjacentElement(\"beforeend\", input);\n  comboBoxEl.insertAdjacentHTML(\"beforeend\", Sanitizer.escapeHTML`\n    <span class=\"${CLEAR_INPUT_BUTTON_WRAPPER_CLASS}\" tabindex=\"-1\">\n        <button type=\"button\" class=\"${CLEAR_INPUT_BUTTON_CLASS}\" aria-label=\"Clear the select contents\">&nbsp;</button>\n      </span>\n      <span class=\"${INPUT_BUTTON_SEPARATOR_CLASS}\">&nbsp;</span>\n      <span class=\"${TOGGLE_LIST_BUTTON_WRAPPER_CLASS}\" tabindex=\"-1\">\n        <button type=\"button\" tabindex=\"-1\" class=\"${TOGGLE_LIST_BUTTON_CLASS}\" aria-label=\"Toggle the dropdown list\">&nbsp;</button>\n      </span>\n      <ul\n        tabindex=\"-1\"\n        id=\"${listId}\"\n        class=\"${LIST_CLASS}\"\n        role=\"listbox\"\n        aria-labelledby=\"${listIdLabel}\"\n        hidden>\n      </ul>\n      <div class=\"${STATUS_CLASS} usa-sr-only\" role=\"status\"></div>\n      <span id=\"${assistiveHintID}\" class=\"usa-sr-only\">\n        When autocomplete results are available use up and down arrows to review and enter to select.\n        Touch device users, explore by touch or with swipe gestures.\n      </span>`);\n\n  if (selectedOption) {\n    const {\n      inputEl\n    } = getComboBoxContext(comboBoxEl);\n    changeElementValue(selectEl, selectedOption.value);\n    changeElementValue(inputEl, selectedOption.text);\n    comboBoxEl.classList.add(COMBO_BOX_PRISTINE_CLASS);\n  }\n\n  if (selectEl.disabled) {\n    disable(comboBoxEl);\n    selectEl.disabled = false;\n  }\n\n  comboBoxEl.dataset.enhanced = \"true\";\n};\n/**\n * Manage the focused element within the list options when\n * navigating via keyboard.\n *\n * @param {HTMLElement} el An anchor element within the combo box component\n * @param {HTMLElement} nextEl An element within the combo box component\n * @param {Object} options options\n * @param {boolean} options.skipFocus skip focus of highlighted item\n * @param {boolean} options.preventScroll should skip procedure to scroll to element\n */\n\n\nconst highlightOption = (el, nextEl, {\n  skipFocus,\n  preventScroll\n} = {}) => {\n  const {\n    inputEl,\n    listEl,\n    focusedOptionEl\n  } = getComboBoxContext(el);\n\n  if (focusedOptionEl) {\n    focusedOptionEl.classList.remove(LIST_OPTION_FOCUSED_CLASS);\n    focusedOptionEl.setAttribute(\"tabIndex\", \"-1\");\n  }\n\n  if (nextEl) {\n    inputEl.setAttribute(\"aria-activedescendant\", nextEl.id);\n    nextEl.setAttribute(\"tabIndex\", \"0\");\n    nextEl.classList.add(LIST_OPTION_FOCUSED_CLASS);\n\n    if (!preventScroll) {\n      const optionBottom = nextEl.offsetTop + nextEl.offsetHeight;\n      const currentBottom = listEl.scrollTop + listEl.offsetHeight;\n\n      if (optionBottom > currentBottom) {\n        listEl.scrollTop = optionBottom - listEl.offsetHeight;\n      }\n\n      if (nextEl.offsetTop < listEl.scrollTop) {\n        listEl.scrollTop = nextEl.offsetTop;\n      }\n    }\n\n    if (!skipFocus) {\n      nextEl.focus({\n        preventScroll\n      });\n    }\n  } else {\n    inputEl.setAttribute(\"aria-activedescendant\", \"\");\n    inputEl.focus();\n  }\n};\n/**\n * Generate a dynamic regular expression based off of a replaceable and possibly filtered value.\n *\n * @param {string} el An element within the combo box component\n * @param {string} query The value to use in the regular expression\n * @param {object} extras An object of regular expressions to replace and filter the query\n */\n\n\nconst generateDynamicRegExp = (filter, query = \"\", extras = {}) => {\n  const escapeRegExp = text => text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\");\n\n  let find = filter.replace(/{{(.*?)}}/g, (m, $1) => {\n    const key = $1.trim();\n    const queryFilter = extras[key];\n\n    if (key !== \"query\" && queryFilter) {\n      const matcher = new RegExp(queryFilter, \"i\");\n      const matches = query.match(matcher);\n\n      if (matches) {\n        return escapeRegExp(matches[1]);\n      }\n\n      return \"\";\n    }\n\n    return escapeRegExp(query);\n  });\n  find = `^(?:${find})$`;\n  return new RegExp(find, \"i\");\n};\n/**\n * Display the option list of a combo box component.\n *\n * @param {HTMLElement} el An element within the combo box component\n */\n\n\nconst displayList = el => {\n  const {\n    comboBoxEl,\n    selectEl,\n    inputEl,\n    listEl,\n    statusEl,\n    isPristine,\n    disableFiltering\n  } = getComboBoxContext(el);\n  let selectedItemId;\n  let firstFoundId;\n  const listOptionBaseId = `${listEl.id}--option-`;\n  const inputValue = (inputEl.value || \"\").toLowerCase();\n  const filter = comboBoxEl.dataset.filter || DEFAULT_FILTER;\n  const regex = generateDynamicRegExp(filter, inputValue, comboBoxEl.dataset);\n  const options = [];\n\n  for (let i = 0, len = selectEl.options.length; i < len; i += 1) {\n    const optionEl = selectEl.options[i];\n    const optionId = `${listOptionBaseId}${options.length}`;\n\n    if (optionEl.value && (disableFiltering || isPristine || !inputValue || regex.test(optionEl.text))) {\n      if (selectEl.value && optionEl.value === selectEl.value) {\n        selectedItemId = optionId;\n      }\n\n      if (disableFiltering && !firstFoundId && regex.test(optionEl.text)) {\n        firstFoundId = optionId;\n      }\n\n      options.push(optionEl);\n    }\n  }\n\n  const numOptions = options.length;\n  const optionHtml = options.map((option, index) => {\n    const optionId = `${listOptionBaseId}${index}`;\n    const classes = [LIST_OPTION_CLASS];\n    let tabindex = \"-1\";\n    let ariaSelected = \"false\";\n\n    if (optionId === selectedItemId) {\n      classes.push(LIST_OPTION_SELECTED_CLASS, LIST_OPTION_FOCUSED_CLASS);\n      tabindex = \"0\";\n      ariaSelected = \"true\";\n    }\n\n    if (!selectedItemId && index === 0) {\n      classes.push(LIST_OPTION_FOCUSED_CLASS);\n      tabindex = \"0\";\n    }\n\n    const li = document.createElement(\"li\");\n    li.setAttribute(\"aria-setsize\", options.length);\n    li.setAttribute(\"aria-posinset\", index + 1);\n    li.setAttribute(\"aria-selected\", ariaSelected);\n    li.setAttribute(\"id\", optionId);\n    li.setAttribute(\"class\", classes.join(\" \"));\n    li.setAttribute(\"tabindex\", tabindex);\n    li.setAttribute(\"role\", \"option\");\n    li.setAttribute(\"data-value\", option.value);\n    li.textContent = option.text;\n    return li;\n  });\n  const noResults = document.createElement(\"li\");\n  noResults.setAttribute(\"class\", `${LIST_OPTION_CLASS}--no-results`);\n  noResults.textContent = \"No results found\";\n  listEl.hidden = false;\n\n  if (numOptions) {\n    listEl.innerHTML = \"\";\n    optionHtml.forEach(item => listEl.insertAdjacentElement(\"beforeend\", item));\n  } else {\n    listEl.innerHTML = \"\";\n    listEl.insertAdjacentElement(\"beforeend\", noResults);\n  }\n\n  inputEl.setAttribute(\"aria-expanded\", \"true\");\n  statusEl.textContent = numOptions ? `${numOptions} result${numOptions > 1 ? \"s\" : \"\"} available.` : \"No results.\";\n  let itemToFocus;\n\n  if (isPristine && selectedItemId) {\n    itemToFocus = listEl.querySelector(`#${selectedItemId}`);\n  } else if (disableFiltering && firstFoundId) {\n    itemToFocus = listEl.querySelector(`#${firstFoundId}`);\n  }\n\n  if (itemToFocus) {\n    highlightOption(listEl, itemToFocus, {\n      skipFocus: true\n    });\n  }\n};\n/**\n * Hide the option list of a combo box component.\n *\n * @param {HTMLElement} el An element within the combo box component\n */\n\n\nconst hideList = el => {\n  const {\n    inputEl,\n    listEl,\n    statusEl,\n    focusedOptionEl\n  } = getComboBoxContext(el);\n  statusEl.innerHTML = \"\";\n  inputEl.setAttribute(\"aria-expanded\", \"false\");\n  inputEl.setAttribute(\"aria-activedescendant\", \"\");\n\n  if (focusedOptionEl) {\n    focusedOptionEl.classList.remove(LIST_OPTION_FOCUSED_CLASS);\n  }\n\n  listEl.scrollTop = 0;\n  listEl.hidden = true;\n};\n/**\n * Select an option list of the combo box component.\n *\n * @param {HTMLElement} listOptionEl The list option being selected\n */\n\n\nconst selectItem = listOptionEl => {\n  const {\n    comboBoxEl,\n    selectEl,\n    inputEl\n  } = getComboBoxContext(listOptionEl);\n  changeElementValue(selectEl, listOptionEl.dataset.value);\n  changeElementValue(inputEl, listOptionEl.textContent);\n  comboBoxEl.classList.add(COMBO_BOX_PRISTINE_CLASS);\n  hideList(comboBoxEl);\n  inputEl.focus();\n};\n/**\n * Clear the input of the combo box\n *\n * @param {HTMLButtonElement} clearButtonEl The clear input button\n */\n\n\nconst clearInput = clearButtonEl => {\n  const {\n    comboBoxEl,\n    listEl,\n    selectEl,\n    inputEl\n  } = getComboBoxContext(clearButtonEl);\n  const listShown = !listEl.hidden;\n  if (selectEl.value) changeElementValue(selectEl);\n  if (inputEl.value) changeElementValue(inputEl);\n  comboBoxEl.classList.remove(COMBO_BOX_PRISTINE_CLASS);\n  if (listShown) displayList(comboBoxEl);\n  inputEl.focus();\n};\n/**\n * Reset the select based off of currently set select value\n *\n * @param {HTMLElement} el An element within the combo box component\n */\n\n\nconst resetSelection = el => {\n  const {\n    comboBoxEl,\n    selectEl,\n    inputEl\n  } = getComboBoxContext(el);\n  const selectValue = selectEl.value;\n  const inputValue = (inputEl.value || \"\").toLowerCase();\n\n  if (selectValue) {\n    for (let i = 0, len = selectEl.options.length; i < len; i += 1) {\n      const optionEl = selectEl.options[i];\n\n      if (optionEl.value === selectValue) {\n        if (inputValue !== optionEl.text) {\n          changeElementValue(inputEl, optionEl.text);\n        }\n\n        comboBoxEl.classList.add(COMBO_BOX_PRISTINE_CLASS);\n        return;\n      }\n    }\n  }\n\n  if (inputValue) {\n    changeElementValue(inputEl);\n  }\n};\n/**\n * Select an option list of the combo box component based off of\n * having a current focused list option or\n * having test that completely matches a list option.\n * Otherwise it clears the input and select.\n *\n * @param {HTMLElement} el An element within the combo box component\n */\n\n\nconst completeSelection = el => {\n  const {\n    comboBoxEl,\n    selectEl,\n    inputEl,\n    statusEl\n  } = getComboBoxContext(el);\n  statusEl.textContent = \"\";\n  const inputValue = (inputEl.value || \"\").toLowerCase();\n\n  if (inputValue) {\n    for (let i = 0, len = selectEl.options.length; i < len; i += 1) {\n      const optionEl = selectEl.options[i];\n\n      if (optionEl.text.toLowerCase() === inputValue) {\n        changeElementValue(selectEl, optionEl.value);\n        changeElementValue(inputEl, optionEl.text);\n        comboBoxEl.classList.add(COMBO_BOX_PRISTINE_CLASS);\n        return;\n      }\n    }\n  }\n\n  resetSelection(comboBoxEl);\n};\n/**\n * Handle the escape event within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleEscape = event => {\n  const {\n    comboBoxEl,\n    inputEl\n  } = getComboBoxContext(event.target);\n  hideList(comboBoxEl);\n  resetSelection(comboBoxEl);\n  inputEl.focus();\n};\n/**\n * Handle the down event within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleDownFromInput = event => {\n  const {\n    comboBoxEl,\n    listEl\n  } = getComboBoxContext(event.target);\n\n  if (listEl.hidden) {\n    displayList(comboBoxEl);\n  }\n\n  const nextOptionEl = listEl.querySelector(LIST_OPTION_FOCUSED) || listEl.querySelector(LIST_OPTION);\n\n  if (nextOptionEl) {\n    highlightOption(comboBoxEl, nextOptionEl);\n  }\n\n  event.preventDefault();\n};\n/**\n * Handle the enter event from an input element within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleEnterFromInput = event => {\n  const {\n    comboBoxEl,\n    listEl\n  } = getComboBoxContext(event.target);\n  const listShown = !listEl.hidden;\n  completeSelection(comboBoxEl);\n\n  if (listShown) {\n    hideList(comboBoxEl);\n  }\n\n  event.preventDefault();\n};\n/**\n * Handle the down event within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleDownFromListOption = event => {\n  const focusedOptionEl = event.target;\n  const nextOptionEl = focusedOptionEl.nextSibling;\n\n  if (nextOptionEl) {\n    highlightOption(focusedOptionEl, nextOptionEl);\n  }\n\n  event.preventDefault();\n};\n/**\n * Handle the tab event from an list option element within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleTabFromListOption = event => {\n  selectItem(event.target);\n  event.preventDefault();\n};\n/**\n * Handle the enter event from list option within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleEnterFromListOption = event => {\n  selectItem(event.target);\n  event.preventDefault();\n};\n/**\n * Handle the up event from list option within the combo box component.\n *\n * @param {KeyboardEvent} event An event within the combo box component\n */\n\n\nconst handleUpFromListOption = event => {\n  const {\n    comboBoxEl,\n    listEl,\n    focusedOptionEl\n  } = getComboBoxContext(event.target);\n  const nextOptionEl = focusedOptionEl && focusedOptionEl.previousSibling;\n  const listShown = !listEl.hidden;\n  highlightOption(comboBoxEl, nextOptionEl);\n\n  if (listShown) {\n    event.preventDefault();\n  }\n\n  if (!nextOptionEl) {\n    hideList(comboBoxEl);\n  }\n};\n/**\n * Select list option on the mouseover event.\n *\n * @param {MouseEvent} event The mouseover event\n * @param {HTMLLIElement} listOptionEl An element within the combo box component\n */\n\n\nconst handleMouseover = listOptionEl => {\n  const isCurrentlyFocused = listOptionEl.classList.contains(LIST_OPTION_FOCUSED_CLASS);\n  if (isCurrentlyFocused) return;\n  highlightOption(listOptionEl, listOptionEl, {\n    preventScroll: true\n  });\n};\n/**\n * Toggle the list when the button is clicked\n *\n * @param {HTMLElement} el An element within the combo box component\n */\n\n\nconst toggleList = el => {\n  const {\n    comboBoxEl,\n    listEl,\n    inputEl\n  } = getComboBoxContext(el);\n\n  if (listEl.hidden) {\n    displayList(comboBoxEl);\n  } else {\n    hideList(comboBoxEl);\n  }\n\n  inputEl.focus();\n};\n/**\n * Handle click from input\n *\n * @param {HTMLInputElement} el An element within the combo box component\n */\n\n\nconst handleClickFromInput = el => {\n  const {\n    comboBoxEl,\n    listEl\n  } = getComboBoxContext(el);\n\n  if (listEl.hidden) {\n    displayList(comboBoxEl);\n  }\n};\n\nconst comboBox = behavior({\n  [CLICK]: {\n    [INPUT]() {\n      if (this.disabled) return;\n      handleClickFromInput(this);\n    },\n\n    [TOGGLE_LIST_BUTTON]() {\n      if (this.disabled) return;\n      toggleList(this);\n    },\n\n    [LIST_OPTION]() {\n      if (this.disabled) return;\n      selectItem(this);\n    },\n\n    [CLEAR_INPUT_BUTTON]() {\n      if (this.disabled) return;\n      clearInput(this);\n    }\n\n  },\n  focusout: {\n    [COMBO_BOX](event) {\n      if (!this.contains(event.relatedTarget)) {\n        resetSelection(this);\n        hideList(this);\n      }\n    }\n\n  },\n  keydown: {\n    [COMBO_BOX]: keymap({\n      Escape: handleEscape\n    }),\n    [INPUT]: keymap({\n      Enter: handleEnterFromInput,\n      ArrowDown: handleDownFromInput,\n      Down: handleDownFromInput\n    }),\n    [LIST_OPTION]: keymap({\n      ArrowUp: handleUpFromListOption,\n      Up: handleUpFromListOption,\n      ArrowDown: handleDownFromListOption,\n      Down: handleDownFromListOption,\n      Enter: handleEnterFromListOption,\n      Tab: handleTabFromListOption,\n      \"Shift+Tab\": noop\n    })\n  },\n  input: {\n    [INPUT]() {\n      const comboBoxEl = this.closest(COMBO_BOX);\n      comboBoxEl.classList.remove(COMBO_BOX_PRISTINE_CLASS);\n      displayList(this);\n    }\n\n  },\n  mouseover: {\n    [LIST_OPTION]() {\n      handleMouseover(this);\n    }\n\n  }\n}, {\n  init(root) {\n    select(COMBO_BOX, root).forEach(comboBoxEl => {\n      enhanceComboBox(comboBoxEl);\n    });\n  },\n\n  getComboBoxContext,\n  enhanceComboBox,\n  generateDynamicRegExp,\n  disable,\n  enable,\n  displayList,\n  hideList,\n  COMBO_BOX_CLASS\n});\nmodule.exports = comboBox;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/components/combo-box.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/components/date-picker.js":
/*!*************************************************************!*\
  !*** ./node_modules/uswds/src/js/components/date-picker.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const keymap = __webpack_require__(/*! receptor/keymap */ \"./node_modules/receptor/keymap/index.js\");\n\nconst behavior = __webpack_require__(/*! ../utils/behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst select = __webpack_require__(/*! ../utils/select */ \"./node_modules/uswds/src/js/utils/select.js\");\n\nconst {\n  prefix: PREFIX\n} = __webpack_require__(/*! ../config */ \"./node_modules/uswds/src/js/config.js\");\n\nconst {\n  CLICK\n} = __webpack_require__(/*! ../events */ \"./node_modules/uswds/src/js/events.js\");\n\nconst activeElement = __webpack_require__(/*! ../utils/active-element */ \"./node_modules/uswds/src/js/utils/active-element.js\");\n\nconst isIosDevice = __webpack_require__(/*! ../utils/is-ios-device */ \"./node_modules/uswds/src/js/utils/is-ios-device.js\");\n\nconst Sanitizer = __webpack_require__(/*! ../utils/sanitizer */ \"./node_modules/uswds/src/js/utils/sanitizer.js\");\n\nconst DATE_PICKER_CLASS = `${PREFIX}-date-picker`;\nconst DATE_PICKER_WRAPPER_CLASS = `${DATE_PICKER_CLASS}__wrapper`;\nconst DATE_PICKER_INITIALIZED_CLASS = `${DATE_PICKER_CLASS}--initialized`;\nconst DATE_PICKER_ACTIVE_CLASS = `${DATE_PICKER_CLASS}--active`;\nconst DATE_PICKER_INTERNAL_INPUT_CLASS = `${DATE_PICKER_CLASS}__internal-input`;\nconst DATE_PICKER_EXTERNAL_INPUT_CLASS = `${DATE_PICKER_CLASS}__external-input`;\nconst DATE_PICKER_BUTTON_CLASS = `${DATE_PICKER_CLASS}__button`;\nconst DATE_PICKER_CALENDAR_CLASS = `${DATE_PICKER_CLASS}__calendar`;\nconst DATE_PICKER_STATUS_CLASS = `${DATE_PICKER_CLASS}__status`;\nconst CALENDAR_DATE_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__date`;\nconst CALENDAR_DATE_FOCUSED_CLASS = `${CALENDAR_DATE_CLASS}--focused`;\nconst CALENDAR_DATE_SELECTED_CLASS = `${CALENDAR_DATE_CLASS}--selected`;\nconst CALENDAR_DATE_PREVIOUS_MONTH_CLASS = `${CALENDAR_DATE_CLASS}--previous-month`;\nconst CALENDAR_DATE_CURRENT_MONTH_CLASS = `${CALENDAR_DATE_CLASS}--current-month`;\nconst CALENDAR_DATE_NEXT_MONTH_CLASS = `${CALENDAR_DATE_CLASS}--next-month`;\nconst CALENDAR_DATE_RANGE_DATE_CLASS = `${CALENDAR_DATE_CLASS}--range-date`;\nconst CALENDAR_DATE_TODAY_CLASS = `${CALENDAR_DATE_CLASS}--today`;\nconst CALENDAR_DATE_RANGE_DATE_START_CLASS = `${CALENDAR_DATE_CLASS}--range-date-start`;\nconst CALENDAR_DATE_RANGE_DATE_END_CLASS = `${CALENDAR_DATE_CLASS}--range-date-end`;\nconst CALENDAR_DATE_WITHIN_RANGE_CLASS = `${CALENDAR_DATE_CLASS}--within-range`;\nconst CALENDAR_PREVIOUS_YEAR_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__previous-year`;\nconst CALENDAR_PREVIOUS_MONTH_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__previous-month`;\nconst CALENDAR_NEXT_YEAR_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__next-year`;\nconst CALENDAR_NEXT_MONTH_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__next-month`;\nconst CALENDAR_MONTH_SELECTION_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__month-selection`;\nconst CALENDAR_YEAR_SELECTION_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__year-selection`;\nconst CALENDAR_MONTH_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__month`;\nconst CALENDAR_MONTH_FOCUSED_CLASS = `${CALENDAR_MONTH_CLASS}--focused`;\nconst CALENDAR_MONTH_SELECTED_CLASS = `${CALENDAR_MONTH_CLASS}--selected`;\nconst CALENDAR_YEAR_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__year`;\nconst CALENDAR_YEAR_FOCUSED_CLASS = `${CALENDAR_YEAR_CLASS}--focused`;\nconst CALENDAR_YEAR_SELECTED_CLASS = `${CALENDAR_YEAR_CLASS}--selected`;\nconst CALENDAR_PREVIOUS_YEAR_CHUNK_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__previous-year-chunk`;\nconst CALENDAR_NEXT_YEAR_CHUNK_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__next-year-chunk`;\nconst CALENDAR_DATE_PICKER_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__date-picker`;\nconst CALENDAR_MONTH_PICKER_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__month-picker`;\nconst CALENDAR_YEAR_PICKER_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__year-picker`;\nconst CALENDAR_TABLE_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__table`;\nconst CALENDAR_ROW_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__row`;\nconst CALENDAR_CELL_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__cell`;\nconst CALENDAR_CELL_CENTER_ITEMS_CLASS = `${CALENDAR_CELL_CLASS}--center-items`;\nconst CALENDAR_MONTH_LABEL_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__month-label`;\nconst CALENDAR_DAY_OF_WEEK_CLASS = `${DATE_PICKER_CALENDAR_CLASS}__day-of-week`;\nconst DATE_PICKER = `.${DATE_PICKER_CLASS}`;\nconst DATE_PICKER_BUTTON = `.${DATE_PICKER_BUTTON_CLASS}`;\nconst DATE_PICKER_INTERNAL_INPUT = `.${DATE_PICKER_INTERNAL_INPUT_CLASS}`;\nconst DATE_PICKER_EXTERNAL_INPUT = `.${DATE_PICKER_EXTERNAL_INPUT_CLASS}`;\nconst DATE_PICKER_CALENDAR = `.${DATE_PICKER_CALENDAR_CLASS}`;\nconst DATE_PICKER_STATUS = `.${DATE_PICKER_STATUS_CLASS}`;\nconst CALENDAR_DATE = `.${CALENDAR_DATE_CLASS}`;\nconst CALENDAR_DATE_FOCUSED = `.${CALENDAR_DATE_FOCUSED_CLASS}`;\nconst CALENDAR_DATE_CURRENT_MONTH = `.${CALENDAR_DATE_CURRENT_MONTH_CLASS}`;\nconst CALENDAR_PREVIOUS_YEAR = `.${CALENDAR_PREVIOUS_YEAR_CLASS}`;\nconst CALENDAR_PREVIOUS_MONTH = `.${CALENDAR_PREVIOUS_MONTH_CLASS}`;\nconst CALENDAR_NEXT_YEAR = `.${CALENDAR_NEXT_YEAR_CLASS}`;\nconst CALENDAR_NEXT_MONTH = `.${CALENDAR_NEXT_MONTH_CLASS}`;\nconst CALENDAR_YEAR_SELECTION = `.${CALENDAR_YEAR_SELECTION_CLASS}`;\nconst CALENDAR_MONTH_SELECTION = `.${CALENDAR_MONTH_SELECTION_CLASS}`;\nconst CALENDAR_MONTH = `.${CALENDAR_MONTH_CLASS}`;\nconst CALENDAR_YEAR = `.${CALENDAR_YEAR_CLASS}`;\nconst CALENDAR_PREVIOUS_YEAR_CHUNK = `.${CALENDAR_PREVIOUS_YEAR_CHUNK_CLASS}`;\nconst CALENDAR_NEXT_YEAR_CHUNK = `.${CALENDAR_NEXT_YEAR_CHUNK_CLASS}`;\nconst CALENDAR_DATE_PICKER = `.${CALENDAR_DATE_PICKER_CLASS}`;\nconst CALENDAR_MONTH_PICKER = `.${CALENDAR_MONTH_PICKER_CLASS}`;\nconst CALENDAR_YEAR_PICKER = `.${CALENDAR_YEAR_PICKER_CLASS}`;\nconst CALENDAR_MONTH_FOCUSED = `.${CALENDAR_MONTH_FOCUSED_CLASS}`;\nconst CALENDAR_YEAR_FOCUSED = `.${CALENDAR_YEAR_FOCUSED_CLASS}`;\nconst VALIDATION_MESSAGE = \"Please enter a valid date\";\nconst MONTH_LABELS = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\nconst DAY_OF_WEEK_LABELS = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\nconst ENTER_KEYCODE = 13;\nconst YEAR_CHUNK = 12;\nconst DEFAULT_MIN_DATE = \"0000-01-01\";\nconst DEFAULT_EXTERNAL_DATE_FORMAT = \"MM/DD/YYYY\";\nconst INTERNAL_DATE_FORMAT = \"YYYY-MM-DD\";\nconst NOT_DISABLED_SELECTOR = \":not([disabled])\";\n\nconst processFocusableSelectors = (...selectors) => selectors.map(query => query + NOT_DISABLED_SELECTOR).join(\", \");\n\nconst DATE_PICKER_FOCUSABLE = processFocusableSelectors(CALENDAR_PREVIOUS_YEAR, CALENDAR_PREVIOUS_MONTH, CALENDAR_YEAR_SELECTION, CALENDAR_MONTH_SELECTION, CALENDAR_NEXT_YEAR, CALENDAR_NEXT_MONTH, CALENDAR_DATE_FOCUSED);\nconst MONTH_PICKER_FOCUSABLE = processFocusableSelectors(CALENDAR_MONTH_FOCUSED);\nconst YEAR_PICKER_FOCUSABLE = processFocusableSelectors(CALENDAR_PREVIOUS_YEAR_CHUNK, CALENDAR_NEXT_YEAR_CHUNK, CALENDAR_YEAR_FOCUSED); // #region Date Manipulation Functions\n\n/**\n * Keep date within month. Month would only be over by 1 to 3 days\n *\n * @param {Date} dateToCheck the date object to check\n * @param {number} month the correct month\n * @returns {Date} the date, corrected if needed\n */\n\nconst keepDateWithinMonth = (dateToCheck, month) => {\n  if (month !== dateToCheck.getMonth()) {\n    dateToCheck.setDate(0);\n  }\n\n  return dateToCheck;\n};\n/**\n * Set date from month day year\n *\n * @param {number} year the year to set\n * @param {number} month the month to set (zero-indexed)\n * @param {number} date the date to set\n * @returns {Date} the set date\n */\n\n\nconst setDate = (year, month, date) => {\n  const newDate = new Date(0);\n  newDate.setFullYear(year, month, date);\n  return newDate;\n};\n/**\n * todays date\n *\n * @returns {Date} todays date\n */\n\n\nconst today = () => {\n  const newDate = new Date();\n  const day = newDate.getDate();\n  const month = newDate.getMonth();\n  const year = newDate.getFullYear();\n  return setDate(year, month, day);\n};\n/**\n * Set date to first day of the month\n *\n * @param {number} date the date to adjust\n * @returns {Date} the adjusted date\n */\n\n\nconst startOfMonth = date => {\n  const newDate = new Date(0);\n  newDate.setFullYear(date.getFullYear(), date.getMonth(), 1);\n  return newDate;\n};\n/**\n * Set date to last day of the month\n *\n * @param {number} date the date to adjust\n * @returns {Date} the adjusted date\n */\n\n\nconst lastDayOfMonth = date => {\n  const newDate = new Date(0);\n  newDate.setFullYear(date.getFullYear(), date.getMonth() + 1, 0);\n  return newDate;\n};\n/**\n * Add days to date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numDays the difference in days\n * @returns {Date} the adjusted date\n */\n\n\nconst addDays = (_date, numDays) => {\n  const newDate = new Date(_date.getTime());\n  newDate.setDate(newDate.getDate() + numDays);\n  return newDate;\n};\n/**\n * Subtract days from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numDays the difference in days\n * @returns {Date} the adjusted date\n */\n\n\nconst subDays = (_date, numDays) => addDays(_date, -numDays);\n/**\n * Add weeks to date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\n\n\nconst addWeeks = (_date, numWeeks) => addDays(_date, numWeeks * 7);\n/**\n * Subtract weeks from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\n\n\nconst subWeeks = (_date, numWeeks) => addWeeks(_date, -numWeeks);\n/**\n * Set date to the start of the week (Sunday)\n *\n * @param {Date} _date the date to adjust\n * @returns {Date} the adjusted date\n */\n\n\nconst startOfWeek = _date => {\n  const dayOfWeek = _date.getDay();\n\n  return subDays(_date, dayOfWeek);\n};\n/**\n * Set date to the end of the week (Saturday)\n *\n * @param {Date} _date the date to adjust\n * @param {number} numWeeks the difference in weeks\n * @returns {Date} the adjusted date\n */\n\n\nconst endOfWeek = _date => {\n  const dayOfWeek = _date.getDay();\n\n  return addDays(_date, 6 - dayOfWeek);\n};\n/**\n * Add months to date and keep date within month\n *\n * @param {Date} _date the date to adjust\n * @param {number} numMonths the difference in months\n * @returns {Date} the adjusted date\n */\n\n\nconst addMonths = (_date, numMonths) => {\n  const newDate = new Date(_date.getTime());\n  const dateMonth = (newDate.getMonth() + 12 + numMonths) % 12;\n  newDate.setMonth(newDate.getMonth() + numMonths);\n  keepDateWithinMonth(newDate, dateMonth);\n  return newDate;\n};\n/**\n * Subtract months from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numMonths the difference in months\n * @returns {Date} the adjusted date\n */\n\n\nconst subMonths = (_date, numMonths) => addMonths(_date, -numMonths);\n/**\n * Add years to date and keep date within month\n *\n * @param {Date} _date the date to adjust\n * @param {number} numYears the difference in years\n * @returns {Date} the adjusted date\n */\n\n\nconst addYears = (_date, numYears) => addMonths(_date, numYears * 12);\n/**\n * Subtract years from date\n *\n * @param {Date} _date the date to adjust\n * @param {number} numYears the difference in years\n * @returns {Date} the adjusted date\n */\n\n\nconst subYears = (_date, numYears) => addYears(_date, -numYears);\n/**\n * Set months of date\n *\n * @param {Date} _date the date to adjust\n * @param {number} month zero-indexed month to set\n * @returns {Date} the adjusted date\n */\n\n\nconst setMonth = (_date, month) => {\n  const newDate = new Date(_date.getTime());\n  newDate.setMonth(month);\n  keepDateWithinMonth(newDate, month);\n  return newDate;\n};\n/**\n * Set year of date\n *\n * @param {Date} _date the date to adjust\n * @param {number} year the year to set\n * @returns {Date} the adjusted date\n */\n\n\nconst setYear = (_date, year) => {\n  const newDate = new Date(_date.getTime());\n  const month = newDate.getMonth();\n  newDate.setFullYear(year);\n  keepDateWithinMonth(newDate, month);\n  return newDate;\n};\n/**\n * Return the earliest date\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {Date} the earliest date\n */\n\n\nconst min = (dateA, dateB) => {\n  let newDate = dateA;\n\n  if (dateB < dateA) {\n    newDate = dateB;\n  }\n\n  return new Date(newDate.getTime());\n};\n/**\n * Return the latest date\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {Date} the latest date\n */\n\n\nconst max = (dateA, dateB) => {\n  let newDate = dateA;\n\n  if (dateB > dateA) {\n    newDate = dateB;\n  }\n\n  return new Date(newDate.getTime());\n};\n/**\n * Check if dates are the in the same year\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {boolean} are dates in the same year\n */\n\n\nconst isSameYear = (dateA, dateB) => dateA && dateB && dateA.getFullYear() === dateB.getFullYear();\n/**\n * Check if dates are the in the same month\n *\n * @param {Date} dateA date to compare\n * @param {Date} dateB date to compare\n * @returns {boolean} are dates in the same month\n */\n\n\nconst isSameMonth = (dateA, dateB) => isSameYear(dateA, dateB) && dateA.getMonth() === dateB.getMonth();\n/**\n * Check if dates are the same date\n *\n * @param {Date} dateA the date to compare\n * @param {Date} dateA the date to compare\n * @returns {boolean} are dates the same date\n */\n\n\nconst isSameDay = (dateA, dateB) => isSameMonth(dateA, dateB) && dateA.getDate() === dateB.getDate();\n/**\n * return a new date within minimum and maximum date\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @returns {Date} the date between min and max\n */\n\n\nconst keepDateBetweenMinAndMax = (date, minDate, maxDate) => {\n  let newDate = date;\n\n  if (date < minDate) {\n    newDate = minDate;\n  } else if (maxDate && date > maxDate) {\n    newDate = maxDate;\n  }\n\n  return new Date(newDate.getTime());\n};\n/**\n * Check if dates is valid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is there a day within the month within min and max dates\n */\n\n\nconst isDateWithinMinAndMax = (date, minDate, maxDate) => date >= minDate && (!maxDate || date <= maxDate);\n/**\n * Check if dates month is invalid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is the month outside min or max dates\n */\n\n\nconst isDatesMonthOutsideMinOrMax = (date, minDate, maxDate) => lastDayOfMonth(date) < minDate || maxDate && startOfMonth(date) > maxDate;\n/**\n * Check if dates year is invalid.\n *\n * @param {Date} date date to check\n * @param {Date} minDate minimum date to allow\n * @param {Date} maxDate maximum date to allow\n * @return {boolean} is the month outside min or max dates\n */\n\n\nconst isDatesYearOutsideMinOrMax = (date, minDate, maxDate) => lastDayOfMonth(setMonth(date, 11)) < minDate || maxDate && startOfMonth(setMonth(date, 0)) > maxDate;\n/**\n * Parse a date with format M-D-YY\n *\n * @param {string} dateString the date string to parse\n * @param {string} dateFormat the format of the date string\n * @param {boolean} adjustDate should the date be adjusted\n * @returns {Date} the parsed date\n */\n\n\nconst parseDateString = (dateString, dateFormat = INTERNAL_DATE_FORMAT, adjustDate = false) => {\n  let date;\n  let month;\n  let day;\n  let year;\n  let parsed;\n\n  if (dateString) {\n    let monthStr;\n    let dayStr;\n    let yearStr;\n\n    if (dateFormat === DEFAULT_EXTERNAL_DATE_FORMAT) {\n      [monthStr, dayStr, yearStr] = dateString.split(\"/\");\n    } else {\n      [yearStr, monthStr, dayStr] = dateString.split(\"-\");\n    }\n\n    if (yearStr) {\n      parsed = parseInt(yearStr, 10);\n\n      if (!Number.isNaN(parsed)) {\n        year = parsed;\n\n        if (adjustDate) {\n          year = Math.max(0, year);\n\n          if (yearStr.length < 3) {\n            const currentYear = today().getFullYear();\n            const currentYearStub = currentYear - currentYear % 10 ** yearStr.length;\n            year = currentYearStub + parsed;\n          }\n        }\n      }\n    }\n\n    if (monthStr) {\n      parsed = parseInt(monthStr, 10);\n\n      if (!Number.isNaN(parsed)) {\n        month = parsed;\n\n        if (adjustDate) {\n          month = Math.max(1, month);\n          month = Math.min(12, month);\n        }\n      }\n    }\n\n    if (month && dayStr && year != null) {\n      parsed = parseInt(dayStr, 10);\n\n      if (!Number.isNaN(parsed)) {\n        day = parsed;\n\n        if (adjustDate) {\n          const lastDayOfTheMonth = setDate(year, month, 0).getDate();\n          day = Math.max(1, day);\n          day = Math.min(lastDayOfTheMonth, day);\n        }\n      }\n    }\n\n    if (month && day && year != null) {\n      date = setDate(year, month - 1, day);\n    }\n  }\n\n  return date;\n};\n/**\n * Format a date to format MM-DD-YYYY\n *\n * @param {Date} date the date to format\n * @param {string} dateFormat the format of the date string\n * @returns {string} the formatted date string\n */\n\n\nconst formatDate = (date, dateFormat = INTERNAL_DATE_FORMAT) => {\n  const padZeros = (value, length) => `0000${value}`.slice(-length);\n\n  const month = date.getMonth() + 1;\n  const day = date.getDate();\n  const year = date.getFullYear();\n\n  if (dateFormat === DEFAULT_EXTERNAL_DATE_FORMAT) {\n    return [padZeros(month, 2), padZeros(day, 2), padZeros(year, 4)].join(\"/\");\n  }\n\n  return [padZeros(year, 4), padZeros(month, 2), padZeros(day, 2)].join(\"-\");\n}; // #endregion Date Manipulation Functions\n\n/**\n * Create a grid string from an array of html strings\n *\n * @param {string[]} htmlArray the array of html items\n * @param {number} rowSize the length of a row\n * @returns {string} the grid string\n */\n\n\nconst listToGridHtml = (htmlArray, rowSize) => {\n  const grid = [];\n  let row = [];\n  let i = 0;\n\n  while (i < htmlArray.length) {\n    row = [];\n    const tr = document.createElement(\"tr\");\n\n    while (i < htmlArray.length && row.length < rowSize) {\n      const td = document.createElement(\"td\");\n      td.insertAdjacentElement(\"beforeend\", htmlArray[i]);\n      row.push(td);\n      i += 1;\n    }\n\n    row.forEach(element => {\n      tr.insertAdjacentElement(\"beforeend\", element);\n    });\n    grid.push(tr);\n  }\n\n  return grid;\n};\n\nconst createTableBody = grid => {\n  const tableBody = document.createElement(\"tbody\");\n  grid.forEach(element => {\n    tableBody.insertAdjacentElement(\"beforeend\", element);\n  });\n  return tableBody;\n};\n/**\n * set the value of the element and dispatch a change event\n *\n * @param {HTMLInputElement} el The element to update\n * @param {string} value The new value of the element\n */\n\n\nconst changeElementValue = (el, value = \"\") => {\n  const elementToChange = el;\n  elementToChange.value = value;\n  const event = new CustomEvent(\"change\", {\n    bubbles: true,\n    cancelable: true,\n    detail: {\n      value\n    }\n  });\n  elementToChange.dispatchEvent(event);\n};\n/**\n * The properties and elements within the date picker.\n * @typedef {Object} DatePickerContext\n * @property {HTMLDivElement} calendarEl\n * @property {HTMLElement} datePickerEl\n * @property {HTMLInputElement} internalInputEl\n * @property {HTMLInputElement} externalInputEl\n * @property {HTMLDivElement} statusEl\n * @property {HTMLDivElement} firstYearChunkEl\n * @property {Date} calendarDate\n * @property {Date} minDate\n * @property {Date} maxDate\n * @property {Date} selectedDate\n * @property {Date} rangeDate\n * @property {Date} defaultDate\n */\n\n/**\n * Get an object of the properties and elements belonging directly to the given\n * date picker component.\n *\n * @param {HTMLElement} el the element within the date picker\n * @returns {DatePickerContext} elements\n */\n\n\nconst getDatePickerContext = el => {\n  const datePickerEl = el.closest(DATE_PICKER);\n\n  if (!datePickerEl) {\n    throw new Error(`Element is missing outer ${DATE_PICKER}`);\n  }\n\n  const internalInputEl = datePickerEl.querySelector(DATE_PICKER_INTERNAL_INPUT);\n  const externalInputEl = datePickerEl.querySelector(DATE_PICKER_EXTERNAL_INPUT);\n  const calendarEl = datePickerEl.querySelector(DATE_PICKER_CALENDAR);\n  const toggleBtnEl = datePickerEl.querySelector(DATE_PICKER_BUTTON);\n  const statusEl = datePickerEl.querySelector(DATE_PICKER_STATUS);\n  const firstYearChunkEl = datePickerEl.querySelector(CALENDAR_YEAR);\n  const inputDate = parseDateString(externalInputEl.value, DEFAULT_EXTERNAL_DATE_FORMAT, true);\n  const selectedDate = parseDateString(internalInputEl.value);\n  const calendarDate = parseDateString(calendarEl.dataset.value);\n  const minDate = parseDateString(datePickerEl.dataset.minDate);\n  const maxDate = parseDateString(datePickerEl.dataset.maxDate);\n  const rangeDate = parseDateString(datePickerEl.dataset.rangeDate);\n  const defaultDate = parseDateString(datePickerEl.dataset.defaultDate);\n\n  if (minDate && maxDate && minDate > maxDate) {\n    throw new Error(\"Minimum date cannot be after maximum date\");\n  }\n\n  return {\n    calendarDate,\n    minDate,\n    toggleBtnEl,\n    selectedDate,\n    maxDate,\n    firstYearChunkEl,\n    datePickerEl,\n    inputDate,\n    internalInputEl,\n    externalInputEl,\n    calendarEl,\n    rangeDate,\n    defaultDate,\n    statusEl\n  };\n};\n/**\n * Disable the date picker component\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst disable = el => {\n  const {\n    externalInputEl,\n    toggleBtnEl\n  } = getDatePickerContext(el);\n  toggleBtnEl.disabled = true;\n  externalInputEl.disabled = true;\n};\n/**\n * Enable the date picker component\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst enable = el => {\n  const {\n    externalInputEl,\n    toggleBtnEl\n  } = getDatePickerContext(el);\n  toggleBtnEl.disabled = false;\n  externalInputEl.disabled = false;\n}; // #region Validation\n\n/**\n * Validate the value in the input as a valid date of format M/D/YYYY\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst isDateInputInvalid = el => {\n  const {\n    externalInputEl,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const dateString = externalInputEl.value;\n  let isInvalid = false;\n\n  if (dateString) {\n    isInvalid = true;\n    const dateStringParts = dateString.split(\"/\");\n    const [month, day, year] = dateStringParts.map(str => {\n      let value;\n      const parsed = parseInt(str, 10);\n      if (!Number.isNaN(parsed)) value = parsed;\n      return value;\n    });\n\n    if (month && day && year != null) {\n      const checkDate = setDate(year, month - 1, day);\n\n      if (checkDate.getMonth() === month - 1 && checkDate.getDate() === day && checkDate.getFullYear() === year && dateStringParts[2].length === 4 && isDateWithinMinAndMax(checkDate, minDate, maxDate)) {\n        isInvalid = false;\n      }\n    }\n  }\n\n  return isInvalid;\n};\n/**\n * Validate the value in the input as a valid date of format M/D/YYYY\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst validateDateInput = el => {\n  const {\n    externalInputEl\n  } = getDatePickerContext(el);\n  const isInvalid = isDateInputInvalid(externalInputEl);\n\n  if (isInvalid && !externalInputEl.validationMessage) {\n    externalInputEl.setCustomValidity(VALIDATION_MESSAGE);\n  }\n\n  if (!isInvalid && externalInputEl.validationMessage === VALIDATION_MESSAGE) {\n    externalInputEl.setCustomValidity(\"\");\n  }\n}; // #endregion Validation\n\n/**\n * Enable the date picker component\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst reconcileInputValues = el => {\n  const {\n    internalInputEl,\n    inputDate\n  } = getDatePickerContext(el);\n  let newValue = \"\";\n\n  if (inputDate && !isDateInputInvalid(el)) {\n    newValue = formatDate(inputDate);\n  }\n\n  if (internalInputEl.value !== newValue) {\n    changeElementValue(internalInputEl, newValue);\n  }\n};\n/**\n * Select the value of the date picker inputs.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n * @param {string} dateString The date string to update in YYYY-MM-DD format\n */\n\n\nconst setCalendarValue = (el, dateString) => {\n  const parsedDate = parseDateString(dateString);\n\n  if (parsedDate) {\n    const formattedDate = formatDate(parsedDate, DEFAULT_EXTERNAL_DATE_FORMAT);\n    const {\n      datePickerEl,\n      internalInputEl,\n      externalInputEl\n    } = getDatePickerContext(el);\n    changeElementValue(internalInputEl, dateString);\n    changeElementValue(externalInputEl, formattedDate);\n    validateDateInput(datePickerEl);\n  }\n};\n/**\n * Enhance an input with the date picker elements\n *\n * @param {HTMLElement} el The initial wrapping element of the date picker component\n */\n\n\nconst enhanceDatePicker = el => {\n  const datePickerEl = el.closest(DATE_PICKER);\n  const {\n    defaultValue\n  } = datePickerEl.dataset;\n  const internalInputEl = datePickerEl.querySelector(`input`);\n\n  if (!internalInputEl) {\n    throw new Error(`${DATE_PICKER} is missing inner input`);\n  }\n\n  if (internalInputEl.value) {\n    internalInputEl.value = \"\";\n  }\n\n  const minDate = parseDateString(datePickerEl.dataset.minDate || internalInputEl.getAttribute(\"min\"));\n  datePickerEl.dataset.minDate = minDate ? formatDate(minDate) : DEFAULT_MIN_DATE;\n  const maxDate = parseDateString(datePickerEl.dataset.maxDate || internalInputEl.getAttribute(\"max\"));\n\n  if (maxDate) {\n    datePickerEl.dataset.maxDate = formatDate(maxDate);\n  }\n\n  const calendarWrapper = document.createElement(\"div\");\n  calendarWrapper.classList.add(DATE_PICKER_WRAPPER_CLASS);\n  const externalInputEl = internalInputEl.cloneNode();\n  externalInputEl.classList.add(DATE_PICKER_EXTERNAL_INPUT_CLASS);\n  externalInputEl.type = \"text\";\n  calendarWrapper.appendChild(externalInputEl);\n  calendarWrapper.insertAdjacentHTML(\"beforeend\", Sanitizer.escapeHTML`\n    <button type=\"button\" class=\"${DATE_PICKER_BUTTON_CLASS}\" aria-haspopup=\"true\" aria-label=\"Toggle calendar\"></button>\n    <div class=\"${DATE_PICKER_CALENDAR_CLASS}\" role=\"dialog\" aria-modal=\"true\" hidden></div>\n    <div class=\"usa-sr-only ${DATE_PICKER_STATUS_CLASS}\" role=\"status\" aria-live=\"polite\"></div>`);\n  internalInputEl.setAttribute(\"aria-hidden\", \"true\");\n  internalInputEl.setAttribute(\"tabindex\", \"-1\");\n  internalInputEl.style.display = \"none\";\n  internalInputEl.classList.add(DATE_PICKER_INTERNAL_INPUT_CLASS);\n  internalInputEl.removeAttribute(\"id\");\n  internalInputEl.removeAttribute(\"name\");\n  internalInputEl.required = false;\n  datePickerEl.appendChild(calendarWrapper);\n  datePickerEl.classList.add(DATE_PICKER_INITIALIZED_CLASS);\n\n  if (defaultValue) {\n    setCalendarValue(datePickerEl, defaultValue);\n  }\n\n  if (internalInputEl.disabled) {\n    disable(datePickerEl);\n    internalInputEl.disabled = false;\n  }\n}; // #region Calendar - Date Selection View\n\n/**\n * render the calendar.\n *\n * @param {HTMLElement} el An element within the date picker component\n * @param {Date} _dateToDisplay a date to render on the calendar\n * @returns {HTMLElement} a reference to the new calendar element\n */\n\n\nconst renderCalendar = (el, _dateToDisplay) => {\n  const {\n    datePickerEl,\n    calendarEl,\n    statusEl,\n    selectedDate,\n    maxDate,\n    minDate,\n    rangeDate\n  } = getDatePickerContext(el);\n  const todaysDate = today();\n  let dateToDisplay = _dateToDisplay || todaysDate;\n  const calendarWasHidden = calendarEl.hidden;\n  const focusedDate = addDays(dateToDisplay, 0);\n  const focusedMonth = dateToDisplay.getMonth();\n  const focusedYear = dateToDisplay.getFullYear();\n  const prevMonth = subMonths(dateToDisplay, 1);\n  const nextMonth = addMonths(dateToDisplay, 1);\n  const currentFormattedDate = formatDate(dateToDisplay);\n  const firstOfMonth = startOfMonth(dateToDisplay);\n  const prevButtonsDisabled = isSameMonth(dateToDisplay, minDate);\n  const nextButtonsDisabled = isSameMonth(dateToDisplay, maxDate);\n  const rangeConclusionDate = selectedDate || dateToDisplay;\n  const rangeStartDate = rangeDate && min(rangeConclusionDate, rangeDate);\n  const rangeEndDate = rangeDate && max(rangeConclusionDate, rangeDate);\n  const withinRangeStartDate = rangeDate && addDays(rangeStartDate, 1);\n  const withinRangeEndDate = rangeDate && subDays(rangeEndDate, 1);\n  const monthLabel = MONTH_LABELS[focusedMonth];\n\n  const generateDateHtml = dateToRender => {\n    const classes = [CALENDAR_DATE_CLASS];\n    const day = dateToRender.getDate();\n    const month = dateToRender.getMonth();\n    const year = dateToRender.getFullYear();\n    const dayOfWeek = dateToRender.getDay();\n    const formattedDate = formatDate(dateToRender);\n    let tabindex = \"-1\";\n    const isDisabled = !isDateWithinMinAndMax(dateToRender, minDate, maxDate);\n    const isSelected = isSameDay(dateToRender, selectedDate);\n\n    if (isSameMonth(dateToRender, prevMonth)) {\n      classes.push(CALENDAR_DATE_PREVIOUS_MONTH_CLASS);\n    }\n\n    if (isSameMonth(dateToRender, focusedDate)) {\n      classes.push(CALENDAR_DATE_CURRENT_MONTH_CLASS);\n    }\n\n    if (isSameMonth(dateToRender, nextMonth)) {\n      classes.push(CALENDAR_DATE_NEXT_MONTH_CLASS);\n    }\n\n    if (isSelected) {\n      classes.push(CALENDAR_DATE_SELECTED_CLASS);\n    }\n\n    if (isSameDay(dateToRender, todaysDate)) {\n      classes.push(CALENDAR_DATE_TODAY_CLASS);\n    }\n\n    if (rangeDate) {\n      if (isSameDay(dateToRender, rangeDate)) {\n        classes.push(CALENDAR_DATE_RANGE_DATE_CLASS);\n      }\n\n      if (isSameDay(dateToRender, rangeStartDate)) {\n        classes.push(CALENDAR_DATE_RANGE_DATE_START_CLASS);\n      }\n\n      if (isSameDay(dateToRender, rangeEndDate)) {\n        classes.push(CALENDAR_DATE_RANGE_DATE_END_CLASS);\n      }\n\n      if (isDateWithinMinAndMax(dateToRender, withinRangeStartDate, withinRangeEndDate)) {\n        classes.push(CALENDAR_DATE_WITHIN_RANGE_CLASS);\n      }\n    }\n\n    if (isSameDay(dateToRender, focusedDate)) {\n      tabindex = \"0\";\n      classes.push(CALENDAR_DATE_FOCUSED_CLASS);\n    }\n\n    const monthStr = MONTH_LABELS[month];\n    const dayStr = DAY_OF_WEEK_LABELS[dayOfWeek];\n    const btn = document.createElement(\"button\");\n    btn.setAttribute(\"type\", \"button\");\n    btn.setAttribute(\"tabindex\", tabindex);\n    btn.setAttribute(\"class\", classes.join(\" \"));\n    btn.setAttribute(\"data-day\", day);\n    btn.setAttribute(\"data-month\", month + 1);\n    btn.setAttribute(\"data-year\", year);\n    btn.setAttribute(\"data-value\", formattedDate);\n    btn.setAttribute(\"aria-label\", Sanitizer.escapeHTML`${day} ${monthStr} ${year} ${dayStr}`);\n    btn.setAttribute(\"aria-selected\", isSelected ? \"true\" : \"false\");\n\n    if (isDisabled === true) {\n      btn.disabled = true;\n    }\n\n    btn.textContent = day;\n    return btn;\n  }; // set date to first rendered day\n\n\n  dateToDisplay = startOfWeek(firstOfMonth);\n  const days = [];\n\n  while (days.length < 28 || dateToDisplay.getMonth() === focusedMonth || days.length % 7 !== 0) {\n    days.push(generateDateHtml(dateToDisplay));\n    dateToDisplay = addDays(dateToDisplay, 1);\n  }\n\n  const datesGrid = listToGridHtml(days, 7);\n  const newCalendar = calendarEl.cloneNode();\n  newCalendar.dataset.value = currentFormattedDate;\n  newCalendar.style.top = `${datePickerEl.offsetHeight}px`;\n  newCalendar.hidden = false;\n  newCalendar.innerHTML = Sanitizer.escapeHTML`\n    <div tabindex=\"-1\" class=\"${CALENDAR_DATE_PICKER_CLASS}\">\n      <div class=\"${CALENDAR_ROW_CLASS}\">\n        <div class=\"${CALENDAR_CELL_CLASS} ${CALENDAR_CELL_CENTER_ITEMS_CLASS}\">\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_PREVIOUS_YEAR_CLASS}\"\n            aria-label=\"Navigate back one year\"\n            ${prevButtonsDisabled ? `disabled=\"disabled\"` : \"\"}\n          ></button>\n        </div>\n        <div class=\"${CALENDAR_CELL_CLASS} ${CALENDAR_CELL_CENTER_ITEMS_CLASS}\">\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_PREVIOUS_MONTH_CLASS}\"\n            aria-label=\"Navigate back one month\"\n            ${prevButtonsDisabled ? `disabled=\"disabled\"` : \"\"}\n          ></button>\n        </div>\n        <div class=\"${CALENDAR_CELL_CLASS} ${CALENDAR_MONTH_LABEL_CLASS}\">\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_MONTH_SELECTION_CLASS}\" aria-label=\"${monthLabel}. Click to select month\"\n          >${monthLabel}</button>\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_YEAR_SELECTION_CLASS}\" aria-label=\"${focusedYear}. Click to select year\"\n          >${focusedYear}</button>\n        </div>\n        <div class=\"${CALENDAR_CELL_CLASS} ${CALENDAR_CELL_CENTER_ITEMS_CLASS}\">\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_NEXT_MONTH_CLASS}\"\n            aria-label=\"Navigate forward one month\"\n            ${nextButtonsDisabled ? `disabled=\"disabled\"` : \"\"}\n          ></button>\n        </div>\n        <div class=\"${CALENDAR_CELL_CLASS} ${CALENDAR_CELL_CENTER_ITEMS_CLASS}\">\n          <button\n            type=\"button\"\n            class=\"${CALENDAR_NEXT_YEAR_CLASS}\"\n            aria-label=\"Navigate forward one year\"\n            ${nextButtonsDisabled ? `disabled=\"disabled\"` : \"\"}\n          ></button>\n        </div>\n      </div>\n    </div>\n    `;\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"class\", CALENDAR_TABLE_CLASS);\n  table.setAttribute(\"role\", \"presentation\");\n  const tableHead = document.createElement(\"thead\");\n  table.insertAdjacentElement(\"beforeend\", tableHead);\n  const tableHeadRow = document.createElement(\"tr\");\n  tableHead.insertAdjacentElement(\"beforeend\", tableHeadRow);\n  const daysOfWeek = {\n    Sunday: \"S\",\n    Monday: \"M\",\n    Tuesday: \"T\",\n    Wednesday: \"W\",\n    Thursday: \"Th\",\n    Friday: \"Fr\",\n    Saturday: \"S\"\n  };\n  Object.keys(daysOfWeek).forEach(key => {\n    const th = document.createElement(\"th\");\n    th.setAttribute(\"class\", CALENDAR_DAY_OF_WEEK_CLASS);\n    th.setAttribute(\"scope\", \"presentation\");\n    th.setAttribute(\"aria-label\", key);\n    th.textContent = daysOfWeek[key];\n    tableHeadRow.insertAdjacentElement(\"beforeend\", th);\n  });\n  const tableBody = createTableBody(datesGrid);\n  table.insertAdjacentElement(\"beforeend\", tableBody); // Container for Years, Months, and Days\n\n  const datePickerCalendarContainer = newCalendar.querySelector(CALENDAR_DATE_PICKER);\n  datePickerCalendarContainer.insertAdjacentElement(\"beforeend\", table);\n  calendarEl.parentNode.replaceChild(newCalendar, calendarEl);\n  datePickerEl.classList.add(DATE_PICKER_ACTIVE_CLASS);\n  const statuses = [];\n\n  if (isSameDay(selectedDate, focusedDate)) {\n    statuses.push(\"Selected date\");\n  }\n\n  if (calendarWasHidden) {\n    statuses.push(\"You can navigate by day using left and right arrows\", \"Weeks by using up and down arrows\", \"Months by using page up and page down keys\", \"Years by using shift plus page up and shift plus page down\", \"Home and end keys navigate to the beginning and end of a week\");\n    statusEl.textContent = \"\";\n  } else {\n    statuses.push(`${monthLabel} ${focusedYear}`);\n  }\n\n  statusEl.textContent = statuses.join(\". \");\n  return newCalendar;\n};\n/**\n * Navigate back one year and display the calendar.\n *\n * @param {HTMLButtonElement} _buttonEl An element within the date picker component\n */\n\n\nconst displayPreviousYear = _buttonEl => {\n  if (_buttonEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(_buttonEl);\n  let date = subYears(calendarDate, 1);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  let nextToFocus = newCalendar.querySelector(CALENDAR_PREVIOUS_YEAR);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_DATE_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Navigate back one month and display the calendar.\n *\n * @param {HTMLButtonElement} _buttonEl An element within the date picker component\n */\n\n\nconst displayPreviousMonth = _buttonEl => {\n  if (_buttonEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(_buttonEl);\n  let date = subMonths(calendarDate, 1);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  let nextToFocus = newCalendar.querySelector(CALENDAR_PREVIOUS_MONTH);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_DATE_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Navigate forward one month and display the calendar.\n *\n * @param {HTMLButtonElement} _buttonEl An element within the date picker component\n */\n\n\nconst displayNextMonth = _buttonEl => {\n  if (_buttonEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(_buttonEl);\n  let date = addMonths(calendarDate, 1);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  let nextToFocus = newCalendar.querySelector(CALENDAR_NEXT_MONTH);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_DATE_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Navigate forward one year and display the calendar.\n *\n * @param {HTMLButtonElement} _buttonEl An element within the date picker component\n */\n\n\nconst displayNextYear = _buttonEl => {\n  if (_buttonEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(_buttonEl);\n  let date = addYears(calendarDate, 1);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  let nextToFocus = newCalendar.querySelector(CALENDAR_NEXT_YEAR);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_DATE_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Hide the calendar of a date picker component.\n *\n * @param {HTMLElement} el An element within the date picker component\n */\n\n\nconst hideCalendar = el => {\n  const {\n    datePickerEl,\n    calendarEl,\n    statusEl\n  } = getDatePickerContext(el);\n  datePickerEl.classList.remove(DATE_PICKER_ACTIVE_CLASS);\n  calendarEl.hidden = true;\n  statusEl.textContent = \"\";\n};\n/**\n * Select a date within the date picker component.\n *\n * @param {HTMLButtonElement} calendarDateEl A date element within the date picker component\n */\n\n\nconst selectDate = calendarDateEl => {\n  if (calendarDateEl.disabled) return;\n  const {\n    datePickerEl,\n    externalInputEl\n  } = getDatePickerContext(calendarDateEl);\n  setCalendarValue(calendarDateEl, calendarDateEl.dataset.value);\n  hideCalendar(datePickerEl);\n  externalInputEl.focus();\n};\n/**\n * Toggle the calendar.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n */\n\n\nconst toggleCalendar = el => {\n  if (el.disabled) return;\n  const {\n    calendarEl,\n    inputDate,\n    minDate,\n    maxDate,\n    defaultDate\n  } = getDatePickerContext(el);\n\n  if (calendarEl.hidden) {\n    const dateToDisplay = keepDateBetweenMinAndMax(inputDate || defaultDate || today(), minDate, maxDate);\n    const newCalendar = renderCalendar(calendarEl, dateToDisplay);\n    newCalendar.querySelector(CALENDAR_DATE_FOCUSED).focus();\n  } else {\n    hideCalendar(el);\n  }\n};\n/**\n * Update the calendar when visible.\n *\n * @param {HTMLElement} el an element within the date picker\n */\n\n\nconst updateCalendarIfVisible = el => {\n  const {\n    calendarEl,\n    inputDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const calendarShown = !calendarEl.hidden;\n\n  if (calendarShown && inputDate) {\n    const dateToDisplay = keepDateBetweenMinAndMax(inputDate, minDate, maxDate);\n    renderCalendar(calendarEl, dateToDisplay);\n  }\n}; // #endregion Calendar - Date Selection View\n// #region Calendar - Month Selection View\n\n/**\n * Display the month selection screen in the date picker.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n * @returns {HTMLElement} a reference to the new calendar element\n */\n\n\nconst displayMonthSelection = (el, monthToDisplay) => {\n  const {\n    calendarEl,\n    statusEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const selectedMonth = calendarDate.getMonth();\n  const focusedMonth = monthToDisplay == null ? selectedMonth : monthToDisplay;\n  const months = MONTH_LABELS.map((month, index) => {\n    const monthToCheck = setMonth(calendarDate, index);\n    const isDisabled = isDatesMonthOutsideMinOrMax(monthToCheck, minDate, maxDate);\n    let tabindex = \"-1\";\n    const classes = [CALENDAR_MONTH_CLASS];\n    const isSelected = index === selectedMonth;\n\n    if (index === focusedMonth) {\n      tabindex = \"0\";\n      classes.push(CALENDAR_MONTH_FOCUSED_CLASS);\n    }\n\n    if (isSelected) {\n      classes.push(CALENDAR_MONTH_SELECTED_CLASS);\n    }\n\n    const btn = document.createElement(\"button\");\n    btn.setAttribute(\"type\", \"button\");\n    btn.setAttribute(\"tabindex\", tabindex);\n    btn.setAttribute(\"class\", classes.join(\" \"));\n    btn.setAttribute(\"data-value\", index);\n    btn.setAttribute(\"data-label\", month);\n    btn.setAttribute(\"aria-selected\", isSelected ? \"true\" : \"false\");\n\n    if (isDisabled === true) {\n      btn.disabled = true;\n    }\n\n    btn.textContent = month;\n    return btn;\n  });\n  const monthsHtml = document.createElement(\"div\");\n  monthsHtml.setAttribute(\"tabindex\", \"-1\");\n  monthsHtml.setAttribute(\"class\", CALENDAR_MONTH_PICKER_CLASS);\n  const table = document.createElement(\"table\");\n  table.setAttribute(\"class\", CALENDAR_TABLE_CLASS);\n  table.setAttribute(\"role\", \"presentation\");\n  const monthsGrid = listToGridHtml(months, 3);\n  const tableBody = createTableBody(monthsGrid);\n  table.insertAdjacentElement(\"beforeend\", tableBody);\n  monthsHtml.insertAdjacentElement(\"beforeend\", table);\n  const newCalendar = calendarEl.cloneNode();\n  newCalendar.insertAdjacentElement(\"beforeend\", monthsHtml);\n  calendarEl.parentNode.replaceChild(newCalendar, calendarEl);\n  statusEl.textContent = \"Select a month.\";\n  return newCalendar;\n};\n/**\n * Select a month in the date picker component.\n *\n * @param {HTMLButtonElement} monthEl An month element within the date picker component\n */\n\n\nconst selectMonth = monthEl => {\n  if (monthEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(monthEl);\n  const selectedMonth = parseInt(monthEl.dataset.value, 10);\n  let date = setMonth(calendarDate, selectedMonth);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  newCalendar.querySelector(CALENDAR_DATE_FOCUSED).focus();\n}; // #endregion Calendar - Month Selection View\n// #region Calendar - Year Selection View\n\n/**\n * Display the year selection screen in the date picker.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n * @param {number} yearToDisplay year to display in year selection\n * @returns {HTMLElement} a reference to the new calendar element\n */\n\n\nconst displayYearSelection = (el, yearToDisplay) => {\n  const {\n    calendarEl,\n    statusEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const selectedYear = calendarDate.getFullYear();\n  const focusedYear = yearToDisplay == null ? selectedYear : yearToDisplay;\n  let yearToChunk = focusedYear;\n  yearToChunk -= yearToChunk % YEAR_CHUNK;\n  yearToChunk = Math.max(0, yearToChunk);\n  const prevYearChunkDisabled = isDatesYearOutsideMinOrMax(setYear(calendarDate, yearToChunk - 1), minDate, maxDate);\n  const nextYearChunkDisabled = isDatesYearOutsideMinOrMax(setYear(calendarDate, yearToChunk + YEAR_CHUNK), minDate, maxDate);\n  const years = [];\n  let yearIndex = yearToChunk;\n\n  while (years.length < YEAR_CHUNK) {\n    const isDisabled = isDatesYearOutsideMinOrMax(setYear(calendarDate, yearIndex), minDate, maxDate);\n    let tabindex = \"-1\";\n    const classes = [CALENDAR_YEAR_CLASS];\n    const isSelected = yearIndex === selectedYear;\n\n    if (yearIndex === focusedYear) {\n      tabindex = \"0\";\n      classes.push(CALENDAR_YEAR_FOCUSED_CLASS);\n    }\n\n    if (isSelected) {\n      classes.push(CALENDAR_YEAR_SELECTED_CLASS);\n    }\n\n    const btn = document.createElement(\"button\");\n    btn.setAttribute(\"type\", \"button\");\n    btn.setAttribute(\"tabindex\", tabindex);\n    btn.setAttribute(\"class\", classes.join(\" \"));\n    btn.setAttribute(\"data-value\", yearIndex);\n    btn.setAttribute(\"aria-selected\", isSelected ? \"true\" : \"false\");\n\n    if (isDisabled === true) {\n      btn.disabled = true;\n    }\n\n    btn.textContent = yearIndex;\n    years.push(btn);\n    yearIndex += 1;\n  }\n\n  const newCalendar = calendarEl.cloneNode(); // create the years calendar wrapper\n\n  const yearsCalendarWrapper = document.createElement(\"div\");\n  yearsCalendarWrapper.setAttribute(\"tabindex\", \"-1\");\n  yearsCalendarWrapper.setAttribute(\"class\", CALENDAR_YEAR_PICKER_CLASS); // create table parent\n\n  const yearsTableParent = document.createElement(\"table\");\n  yearsTableParent.setAttribute(\"role\", \"presentation\");\n  yearsTableParent.setAttribute(\"class\", CALENDAR_TABLE_CLASS); // create table body and table row\n\n  const yearsHTMLTableBody = document.createElement(\"tbody\");\n  const yearsHTMLTableBodyRow = document.createElement(\"tr\"); // create previous button\n\n  const previousYearsBtn = document.createElement(\"button\");\n  previousYearsBtn.setAttribute(\"type\", \"button\");\n  previousYearsBtn.setAttribute(\"class\", CALENDAR_PREVIOUS_YEAR_CHUNK_CLASS);\n  previousYearsBtn.setAttribute(\"aria-label\", `Navigate back ${YEAR_CHUNK} years`);\n\n  if (prevYearChunkDisabled === true) {\n    previousYearsBtn.disabled = true;\n  }\n\n  previousYearsBtn.innerHTML = Sanitizer.escapeHTML`&nbsp`; // create next button\n\n  const nextYearsBtn = document.createElement(\"button\");\n  nextYearsBtn.setAttribute(\"type\", \"button\");\n  nextYearsBtn.setAttribute(\"class\", CALENDAR_NEXT_YEAR_CHUNK_CLASS);\n  nextYearsBtn.setAttribute(\"aria-label\", `Navigate forward ${YEAR_CHUNK} years`);\n\n  if (nextYearChunkDisabled === true) {\n    nextYearsBtn.disabled = true;\n  }\n\n  nextYearsBtn.innerHTML = Sanitizer.escapeHTML`&nbsp`; // create the actual years table\n\n  const yearsTable = document.createElement(\"table\");\n  yearsTable.setAttribute(\"class\", CALENDAR_TABLE_CLASS);\n  yearsTable.setAttribute(\"role\", \"presentation\"); // create the years child table\n\n  const yearsGrid = listToGridHtml(years, 3);\n  const yearsTableBody = createTableBody(yearsGrid); // append the grid to the years child table\n\n  yearsTable.insertAdjacentElement(\"beforeend\", yearsTableBody); // create the prev button td and append the prev button\n\n  const yearsHTMLTableBodyDetailPrev = document.createElement(\"td\");\n  yearsHTMLTableBodyDetailPrev.insertAdjacentElement(\"beforeend\", previousYearsBtn); // create the years td and append the years child table\n\n  const yearsHTMLTableBodyYearsDetail = document.createElement(\"td\");\n  yearsHTMLTableBodyYearsDetail.setAttribute(\"colspan\", \"3\");\n  yearsHTMLTableBodyYearsDetail.insertAdjacentElement(\"beforeend\", yearsTable); // create the next button td and append the next button\n\n  const yearsHTMLTableBodyDetailNext = document.createElement(\"td\");\n  yearsHTMLTableBodyDetailNext.insertAdjacentElement(\"beforeend\", nextYearsBtn); // append the three td to the years child table row\n\n  yearsHTMLTableBodyRow.insertAdjacentElement(\"beforeend\", yearsHTMLTableBodyDetailPrev);\n  yearsHTMLTableBodyRow.insertAdjacentElement(\"beforeend\", yearsHTMLTableBodyYearsDetail);\n  yearsHTMLTableBodyRow.insertAdjacentElement(\"beforeend\", yearsHTMLTableBodyDetailNext); // append the table row to the years child table body\n\n  yearsHTMLTableBody.insertAdjacentElement(\"beforeend\", yearsHTMLTableBodyRow); // append the years table body to the years parent table\n\n  yearsTableParent.insertAdjacentElement(\"beforeend\", yearsHTMLTableBody); // append the parent table to the calendar wrapper\n\n  yearsCalendarWrapper.insertAdjacentElement(\"beforeend\", yearsTableParent); // append the years calender to the new calendar\n\n  newCalendar.insertAdjacentElement(\"beforeend\", yearsCalendarWrapper); // replace calendar\n\n  calendarEl.parentNode.replaceChild(newCalendar, calendarEl);\n  statusEl.textContent = Sanitizer.escapeHTML`Showing years ${yearToChunk} to ${yearToChunk + YEAR_CHUNK - 1}. Select a year.`;\n  return newCalendar;\n};\n/**\n * Navigate back by years and display the year selection screen.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n */\n\n\nconst displayPreviousYearChunk = el => {\n  if (el.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const yearEl = calendarEl.querySelector(CALENDAR_YEAR_FOCUSED);\n  const selectedYear = parseInt(yearEl.textContent, 10);\n  let adjustedYear = selectedYear - YEAR_CHUNK;\n  adjustedYear = Math.max(0, adjustedYear);\n  const date = setYear(calendarDate, adjustedYear);\n  const cappedDate = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = displayYearSelection(calendarEl, cappedDate.getFullYear());\n  let nextToFocus = newCalendar.querySelector(CALENDAR_PREVIOUS_YEAR_CHUNK);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_YEAR_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Navigate forward by years and display the year selection screen.\n *\n * @param {HTMLButtonElement} el An element within the date picker component\n */\n\n\nconst displayNextYearChunk = el => {\n  if (el.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(el);\n  const yearEl = calendarEl.querySelector(CALENDAR_YEAR_FOCUSED);\n  const selectedYear = parseInt(yearEl.textContent, 10);\n  let adjustedYear = selectedYear + YEAR_CHUNK;\n  adjustedYear = Math.max(0, adjustedYear);\n  const date = setYear(calendarDate, adjustedYear);\n  const cappedDate = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = displayYearSelection(calendarEl, cappedDate.getFullYear());\n  let nextToFocus = newCalendar.querySelector(CALENDAR_NEXT_YEAR_CHUNK);\n\n  if (nextToFocus.disabled) {\n    nextToFocus = newCalendar.querySelector(CALENDAR_YEAR_PICKER);\n  }\n\n  nextToFocus.focus();\n};\n/**\n * Select a year in the date picker component.\n *\n * @param {HTMLButtonElement} yearEl A year element within the date picker component\n */\n\n\nconst selectYear = yearEl => {\n  if (yearEl.disabled) return;\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(yearEl);\n  const selectedYear = parseInt(yearEl.innerHTML, 10);\n  let date = setYear(calendarDate, selectedYear);\n  date = keepDateBetweenMinAndMax(date, minDate, maxDate);\n  const newCalendar = renderCalendar(calendarEl, date);\n  newCalendar.querySelector(CALENDAR_DATE_FOCUSED).focus();\n}; // #endregion Calendar - Year Selection View\n// #region Calendar Event Handling\n\n/**\n * Hide the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\n\nconst handleEscapeFromCalendar = event => {\n  const {\n    datePickerEl,\n    externalInputEl\n  } = getDatePickerContext(event.target);\n  hideCalendar(datePickerEl);\n  externalInputEl.focus();\n  event.preventDefault();\n}; // #endregion Calendar Event Handling\n// #region Calendar Date Event Handling\n\n/**\n * Adjust the date and display the calendar if needed.\n *\n * @param {function} adjustDateFn function that returns the adjusted date\n */\n\n\nconst adjustCalendar = adjustDateFn => event => {\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(event.target);\n  const date = adjustDateFn(calendarDate);\n  const cappedDate = keepDateBetweenMinAndMax(date, minDate, maxDate);\n\n  if (!isSameDay(calendarDate, cappedDate)) {\n    const newCalendar = renderCalendar(calendarEl, cappedDate);\n    newCalendar.querySelector(CALENDAR_DATE_FOCUSED).focus();\n  }\n\n  event.preventDefault();\n};\n/**\n * Navigate back one week and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\n\nconst handleUpFromDate = adjustCalendar(date => subWeeks(date, 1));\n/**\n * Navigate forward one week and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleDownFromDate = adjustCalendar(date => addWeeks(date, 1));\n/**\n * Navigate back one day and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleLeftFromDate = adjustCalendar(date => subDays(date, 1));\n/**\n * Navigate forward one day and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleRightFromDate = adjustCalendar(date => addDays(date, 1));\n/**\n * Navigate to the start of the week and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleHomeFromDate = adjustCalendar(date => startOfWeek(date));\n/**\n * Navigate to the end of the week and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleEndFromDate = adjustCalendar(date => endOfWeek(date));\n/**\n * Navigate forward one month and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageDownFromDate = adjustCalendar(date => addMonths(date, 1));\n/**\n * Navigate back one month and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageUpFromDate = adjustCalendar(date => subMonths(date, 1));\n/**\n * Navigate forward one year and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleShiftPageDownFromDate = adjustCalendar(date => addYears(date, 1));\n/**\n * Navigate back one year and display the calendar.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleShiftPageUpFromDate = adjustCalendar(date => subYears(date, 1));\n/**\n * display the calendar for the mouseover date.\n *\n * @param {MouseEvent} event The mouseover event\n * @param {HTMLButtonElement} dateEl A date element within the date picker component\n */\n\nconst handleMouseoverFromDate = dateEl => {\n  if (dateEl.disabled) return;\n  const calendarEl = dateEl.closest(DATE_PICKER_CALENDAR);\n  const currentCalendarDate = calendarEl.dataset.value;\n  const hoverDate = dateEl.dataset.value;\n  if (hoverDate === currentCalendarDate) return;\n  const dateToDisplay = parseDateString(hoverDate);\n  const newCalendar = renderCalendar(calendarEl, dateToDisplay);\n  newCalendar.querySelector(CALENDAR_DATE_FOCUSED).focus();\n}; // #endregion Calendar Date Event Handling\n// #region Calendar Month Event Handling\n\n/**\n * Adjust the month and display the month selection screen if needed.\n *\n * @param {function} adjustMonthFn function that returns the adjusted month\n */\n\n\nconst adjustMonthSelectionScreen = adjustMonthFn => event => {\n  const monthEl = event.target;\n  const selectedMonth = parseInt(monthEl.dataset.value, 10);\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(monthEl);\n  const currentDate = setMonth(calendarDate, selectedMonth);\n  let adjustedMonth = adjustMonthFn(selectedMonth);\n  adjustedMonth = Math.max(0, Math.min(11, adjustedMonth));\n  const date = setMonth(calendarDate, adjustedMonth);\n  const cappedDate = keepDateBetweenMinAndMax(date, minDate, maxDate);\n\n  if (!isSameMonth(currentDate, cappedDate)) {\n    const newCalendar = displayMonthSelection(calendarEl, cappedDate.getMonth());\n    newCalendar.querySelector(CALENDAR_MONTH_FOCUSED).focus();\n  }\n\n  event.preventDefault();\n};\n/**\n * Navigate back three months and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\n\nconst handleUpFromMonth = adjustMonthSelectionScreen(month => month - 3);\n/**\n * Navigate forward three months and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleDownFromMonth = adjustMonthSelectionScreen(month => month + 3);\n/**\n * Navigate back one month and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleLeftFromMonth = adjustMonthSelectionScreen(month => month - 1);\n/**\n * Navigate forward one month and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleRightFromMonth = adjustMonthSelectionScreen(month => month + 1);\n/**\n * Navigate to the start of the row of months and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleHomeFromMonth = adjustMonthSelectionScreen(month => month - month % 3);\n/**\n * Navigate to the end of the row of months and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleEndFromMonth = adjustMonthSelectionScreen(month => month + 2 - month % 3);\n/**\n * Navigate to the last month (December) and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageDownFromMonth = adjustMonthSelectionScreen(() => 11);\n/**\n * Navigate to the first month (January) and display the month selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageUpFromMonth = adjustMonthSelectionScreen(() => 0);\n/**\n * update the focus on a month when the mouse moves.\n *\n * @param {MouseEvent} event The mouseover event\n * @param {HTMLButtonElement} monthEl A month element within the date picker component\n */\n\nconst handleMouseoverFromMonth = monthEl => {\n  if (monthEl.disabled) return;\n  if (monthEl.classList.contains(CALENDAR_MONTH_FOCUSED_CLASS)) return;\n  const focusMonth = parseInt(monthEl.dataset.value, 10);\n  const newCalendar = displayMonthSelection(monthEl, focusMonth);\n  newCalendar.querySelector(CALENDAR_MONTH_FOCUSED).focus();\n}; // #endregion Calendar Month Event Handling\n// #region Calendar Year Event Handling\n\n/**\n * Adjust the year and display the year selection screen if needed.\n *\n * @param {function} adjustYearFn function that returns the adjusted year\n */\n\n\nconst adjustYearSelectionScreen = adjustYearFn => event => {\n  const yearEl = event.target;\n  const selectedYear = parseInt(yearEl.dataset.value, 10);\n  const {\n    calendarEl,\n    calendarDate,\n    minDate,\n    maxDate\n  } = getDatePickerContext(yearEl);\n  const currentDate = setYear(calendarDate, selectedYear);\n  let adjustedYear = adjustYearFn(selectedYear);\n  adjustedYear = Math.max(0, adjustedYear);\n  const date = setYear(calendarDate, adjustedYear);\n  const cappedDate = keepDateBetweenMinAndMax(date, minDate, maxDate);\n\n  if (!isSameYear(currentDate, cappedDate)) {\n    const newCalendar = displayYearSelection(calendarEl, cappedDate.getFullYear());\n    newCalendar.querySelector(CALENDAR_YEAR_FOCUSED).focus();\n  }\n\n  event.preventDefault();\n};\n/**\n * Navigate back three years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\n\nconst handleUpFromYear = adjustYearSelectionScreen(year => year - 3);\n/**\n * Navigate forward three years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleDownFromYear = adjustYearSelectionScreen(year => year + 3);\n/**\n * Navigate back one year and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleLeftFromYear = adjustYearSelectionScreen(year => year - 1);\n/**\n * Navigate forward one year and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleRightFromYear = adjustYearSelectionScreen(year => year + 1);\n/**\n * Navigate to the start of the row of years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleHomeFromYear = adjustYearSelectionScreen(year => year - year % 3);\n/**\n * Navigate to the end of the row of years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handleEndFromYear = adjustYearSelectionScreen(year => year + 2 - year % 3);\n/**\n * Navigate to back 12 years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageUpFromYear = adjustYearSelectionScreen(year => year - YEAR_CHUNK);\n/**\n * Navigate forward 12 years and display the year selection screen.\n *\n * @param {KeyboardEvent} event the keydown event\n */\n\nconst handlePageDownFromYear = adjustYearSelectionScreen(year => year + YEAR_CHUNK);\n/**\n * update the focus on a year when the mouse moves.\n *\n * @param {MouseEvent} event The mouseover event\n * @param {HTMLButtonElement} dateEl A year element within the date picker component\n */\n\nconst handleMouseoverFromYear = yearEl => {\n  if (yearEl.disabled) return;\n  if (yearEl.classList.contains(CALENDAR_YEAR_FOCUSED_CLASS)) return;\n  const focusYear = parseInt(yearEl.dataset.value, 10);\n  const newCalendar = displayYearSelection(yearEl, focusYear);\n  newCalendar.querySelector(CALENDAR_YEAR_FOCUSED).focus();\n}; // #endregion Calendar Year Event Handling\n// #region Focus Handling Event Handling\n\n\nconst tabHandler = focusable => {\n  const getFocusableContext = el => {\n    const {\n      calendarEl\n    } = getDatePickerContext(el);\n    const focusableElements = select(focusable, calendarEl);\n    const firstTabIndex = 0;\n    const lastTabIndex = focusableElements.length - 1;\n    const firstTabStop = focusableElements[firstTabIndex];\n    const lastTabStop = focusableElements[lastTabIndex];\n    const focusIndex = focusableElements.indexOf(activeElement());\n    const isLastTab = focusIndex === lastTabIndex;\n    const isFirstTab = focusIndex === firstTabIndex;\n    const isNotFound = focusIndex === -1;\n    return {\n      focusableElements,\n      isNotFound,\n      firstTabStop,\n      isFirstTab,\n      lastTabStop,\n      isLastTab\n    };\n  };\n\n  return {\n    tabAhead(event) {\n      const {\n        firstTabStop,\n        isLastTab,\n        isNotFound\n      } = getFocusableContext(event.target);\n\n      if (isLastTab || isNotFound) {\n        event.preventDefault();\n        firstTabStop.focus();\n      }\n    },\n\n    tabBack(event) {\n      const {\n        lastTabStop,\n        isFirstTab,\n        isNotFound\n      } = getFocusableContext(event.target);\n\n      if (isFirstTab || isNotFound) {\n        event.preventDefault();\n        lastTabStop.focus();\n      }\n    }\n\n  };\n};\n\nconst datePickerTabEventHandler = tabHandler(DATE_PICKER_FOCUSABLE);\nconst monthPickerTabEventHandler = tabHandler(MONTH_PICKER_FOCUSABLE);\nconst yearPickerTabEventHandler = tabHandler(YEAR_PICKER_FOCUSABLE); // #endregion Focus Handling Event Handling\n// #region Date Picker Event Delegation Registration / Component\n\nconst datePickerEvents = {\n  [CLICK]: {\n    [DATE_PICKER_BUTTON]() {\n      toggleCalendar(this);\n    },\n\n    [CALENDAR_DATE]() {\n      selectDate(this);\n    },\n\n    [CALENDAR_MONTH]() {\n      selectMonth(this);\n    },\n\n    [CALENDAR_YEAR]() {\n      selectYear(this);\n    },\n\n    [CALENDAR_PREVIOUS_MONTH]() {\n      displayPreviousMonth(this);\n    },\n\n    [CALENDAR_NEXT_MONTH]() {\n      displayNextMonth(this);\n    },\n\n    [CALENDAR_PREVIOUS_YEAR]() {\n      displayPreviousYear(this);\n    },\n\n    [CALENDAR_NEXT_YEAR]() {\n      displayNextYear(this);\n    },\n\n    [CALENDAR_PREVIOUS_YEAR_CHUNK]() {\n      displayPreviousYearChunk(this);\n    },\n\n    [CALENDAR_NEXT_YEAR_CHUNK]() {\n      displayNextYearChunk(this);\n    },\n\n    [CALENDAR_MONTH_SELECTION]() {\n      const newCalendar = displayMonthSelection(this);\n      newCalendar.querySelector(CALENDAR_MONTH_FOCUSED).focus();\n    },\n\n    [CALENDAR_YEAR_SELECTION]() {\n      const newCalendar = displayYearSelection(this);\n      newCalendar.querySelector(CALENDAR_YEAR_FOCUSED).focus();\n    }\n\n  },\n  keyup: {\n    [DATE_PICKER_CALENDAR](event) {\n      const keydown = this.dataset.keydownKeyCode;\n\n      if (`${event.keyCode}` !== keydown) {\n        event.preventDefault();\n      }\n    }\n\n  },\n  keydown: {\n    [DATE_PICKER_EXTERNAL_INPUT](event) {\n      if (event.keyCode === ENTER_KEYCODE) {\n        validateDateInput(this);\n      }\n    },\n\n    [CALENDAR_DATE]: keymap({\n      Up: handleUpFromDate,\n      ArrowUp: handleUpFromDate,\n      Down: handleDownFromDate,\n      ArrowDown: handleDownFromDate,\n      Left: handleLeftFromDate,\n      ArrowLeft: handleLeftFromDate,\n      Right: handleRightFromDate,\n      ArrowRight: handleRightFromDate,\n      Home: handleHomeFromDate,\n      End: handleEndFromDate,\n      PageDown: handlePageDownFromDate,\n      PageUp: handlePageUpFromDate,\n      \"Shift+PageDown\": handleShiftPageDownFromDate,\n      \"Shift+PageUp\": handleShiftPageUpFromDate,\n      Tab: datePickerTabEventHandler.tabAhead\n    }),\n    [CALENDAR_DATE_PICKER]: keymap({\n      Tab: datePickerTabEventHandler.tabAhead,\n      \"Shift+Tab\": datePickerTabEventHandler.tabBack\n    }),\n    [CALENDAR_MONTH]: keymap({\n      Up: handleUpFromMonth,\n      ArrowUp: handleUpFromMonth,\n      Down: handleDownFromMonth,\n      ArrowDown: handleDownFromMonth,\n      Left: handleLeftFromMonth,\n      ArrowLeft: handleLeftFromMonth,\n      Right: handleRightFromMonth,\n      ArrowRight: handleRightFromMonth,\n      Home: handleHomeFromMonth,\n      End: handleEndFromMonth,\n      PageDown: handlePageDownFromMonth,\n      PageUp: handlePageUpFromMonth\n    }),\n    [CALENDAR_MONTH_PICKER]: keymap({\n      Tab: monthPickerTabEventHandler.tabAhead,\n      \"Shift+Tab\": monthPickerTabEventHandler.tabBack\n    }),\n    [CALENDAR_YEAR]: keymap({\n      Up: handleUpFromYear,\n      ArrowUp: handleUpFromYear,\n      Down: handleDownFromYear,\n      ArrowDown: handleDownFromYear,\n      Left: handleLeftFromYear,\n      ArrowLeft: handleLeftFromYear,\n      Right: handleRightFromYear,\n      ArrowRight: handleRightFromYear,\n      Home: handleHomeFromYear,\n      End: handleEndFromYear,\n      PageDown: handlePageDownFromYear,\n      PageUp: handlePageUpFromYear\n    }),\n    [CALENDAR_YEAR_PICKER]: keymap({\n      Tab: yearPickerTabEventHandler.tabAhead,\n      \"Shift+Tab\": yearPickerTabEventHandler.tabBack\n    }),\n\n    [DATE_PICKER_CALENDAR](event) {\n      this.dataset.keydownKeyCode = event.keyCode;\n    },\n\n    [DATE_PICKER](event) {\n      const keyMap = keymap({\n        Escape: handleEscapeFromCalendar\n      });\n      keyMap(event);\n    }\n\n  },\n  focusout: {\n    [DATE_PICKER_EXTERNAL_INPUT]() {\n      validateDateInput(this);\n    },\n\n    [DATE_PICKER](event) {\n      if (!this.contains(event.relatedTarget)) {\n        hideCalendar(this);\n      }\n    }\n\n  },\n  input: {\n    [DATE_PICKER_EXTERNAL_INPUT]() {\n      reconcileInputValues(this);\n      updateCalendarIfVisible(this);\n    }\n\n  }\n};\n\nif (!isIosDevice()) {\n  datePickerEvents.mouseover = {\n    [CALENDAR_DATE_CURRENT_MONTH]() {\n      handleMouseoverFromDate(this);\n    },\n\n    [CALENDAR_MONTH]() {\n      handleMouseoverFromMonth(this);\n    },\n\n    [CALENDAR_YEAR]() {\n      handleMouseoverFromYear(this);\n    }\n\n  };\n}\n\nconst datePicker = behavior(datePickerEvents, {\n  init(root) {\n    select(DATE_PICKER, root).forEach(datePickerEl => {\n      enhanceDatePicker(datePickerEl);\n    });\n  },\n\n  getDatePickerContext,\n  disable,\n  enable,\n  isDateInputInvalid,\n  setCalendarValue,\n  validateDateInput,\n  renderCalendar,\n  updateCalendarIfVisible\n}); // #endregion Date Picker Event Delegation Registration / Component\n\nmodule.exports = datePicker;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/components/date-picker.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/components/navigation.js":
/*!************************************************************!*\
  !*** ./node_modules/uswds/src/js/components/navigation.js ***!
  \************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const keymap = __webpack_require__(/*! receptor/keymap */ \"./node_modules/receptor/keymap/index.js\");\n\nconst behavior = __webpack_require__(/*! ../utils/behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst select = __webpack_require__(/*! ../utils/select */ \"./node_modules/uswds/src/js/utils/select.js\");\n\nconst toggle = __webpack_require__(/*! ../utils/toggle */ \"./node_modules/uswds/src/js/utils/toggle.js\");\n\nconst FocusTrap = __webpack_require__(/*! ../utils/focus-trap */ \"./node_modules/uswds/src/js/utils/focus-trap.js\");\n\nconst accordion = __webpack_require__(/*! ./accordion */ \"./node_modules/uswds/src/js/components/accordion.js\");\n\nconst ScrollBarWidth = __webpack_require__(/*! ../utils/scrollbar-width */ \"./node_modules/uswds/src/js/utils/scrollbar-width.js\");\n\nconst {\n  CLICK\n} = __webpack_require__(/*! ../events */ \"./node_modules/uswds/src/js/events.js\");\n\nconst {\n  prefix: PREFIX\n} = __webpack_require__(/*! ../config */ \"./node_modules/uswds/src/js/config.js\");\n\nconst BODY = \"body\";\nconst HEADER = `.${PREFIX}-header`;\nconst NAV = `.${PREFIX}-nav`;\nconst NAV_PRIMARY = `.${PREFIX}-nav__primary`;\nconst NAV_PRIMARY_ITEM = `.${PREFIX}-nav__primary-item`;\nconst NAV_CONTROL = `button.${PREFIX}-nav__link`;\nconst NAV_LINKS = `${NAV} a`;\nconst NON_NAV_HIDDEN_ATTRIBUTE = `data-nav-hidden`;\nconst OPENERS = `.${PREFIX}-menu-btn`;\nconst CLOSE_BUTTON = `.${PREFIX}-nav__close`;\nconst OVERLAY = `.${PREFIX}-overlay`;\nconst CLOSERS = `${CLOSE_BUTTON}, .${PREFIX}-overlay`;\nconst TOGGLES = [NAV, OVERLAY].join(\", \");\nconst NON_NAV_ELEMENTS = `body > *:not(${HEADER}):not([aria-hidden])`;\nconst NON_NAV_HIDDEN = `[${NON_NAV_HIDDEN_ATTRIBUTE}]`;\nconst ACTIVE_CLASS = \"usa-js-mobile-nav--active\";\nconst VISIBLE_CLASS = \"is-visible\";\nlet navigation;\nlet navActive;\nlet nonNavElements;\n\nconst isActive = () => document.body.classList.contains(ACTIVE_CLASS);\n\nconst SCROLLBAR_WIDTH = ScrollBarWidth();\nconst INITIAL_PADDING = window.getComputedStyle(document.body).getPropertyValue(\"padding-right\");\nconst TEMPORARY_PADDING = `${parseInt(INITIAL_PADDING.replace(/px/, \"\"), 10) + parseInt(SCROLLBAR_WIDTH.replace(/px/, \"\"), 10)}px`;\n\nconst hideNonNavItems = () => {\n  nonNavElements = document.querySelectorAll(NON_NAV_ELEMENTS);\n  nonNavElements.forEach(nonNavElement => {\n    nonNavElement.setAttribute(\"aria-hidden\", true);\n    nonNavElement.setAttribute(NON_NAV_HIDDEN_ATTRIBUTE, \"\");\n  });\n};\n\nconst showNonNavItems = () => {\n  nonNavElements = document.querySelectorAll(NON_NAV_HIDDEN);\n\n  if (!nonNavElements) {\n    return;\n  } // Remove aria-hidden from non-header elements\n\n\n  nonNavElements.forEach(nonNavElement => {\n    nonNavElement.removeAttribute(\"aria-hidden\");\n    nonNavElement.removeAttribute(NON_NAV_HIDDEN_ATTRIBUTE);\n  });\n}; // Toggle all non-header elements #3527.\n\n\nconst toggleNonNavItems = active => {\n  if (active) {\n    hideNonNavItems();\n  } else {\n    showNonNavItems();\n  }\n};\n\nconst toggleNav = active => {\n  const {\n    body\n  } = document;\n  const safeActive = typeof active === \"boolean\" ? active : !isActive();\n  body.classList.toggle(ACTIVE_CLASS, safeActive);\n  select(TOGGLES).forEach(el => el.classList.toggle(VISIBLE_CLASS, safeActive));\n  navigation.focusTrap.update(safeActive);\n  const closeButton = body.querySelector(CLOSE_BUTTON);\n  const menuButton = document.querySelector(OPENERS);\n  body.style.paddingRight = body.style.paddingRight === TEMPORARY_PADDING ? INITIAL_PADDING : TEMPORARY_PADDING;\n  toggleNonNavItems(safeActive);\n\n  if (safeActive && closeButton) {\n    // The mobile nav was just activated. Focus on the close button, which is\n    // just before all the nav elements in the tab order.\n    closeButton.focus();\n  } else if (!safeActive && document.activeElement === closeButton && menuButton) {\n    // The mobile nav was just deactivated, and focus was on the close\n    // button, which is no longer visible. We don't want the focus to\n    // disappear into the void, so focus on the menu button if it's\n    // visible (this may have been what the user was just focused on,\n    // if they triggered the mobile nav by mistake).\n    menuButton.focus();\n  }\n\n  return safeActive;\n};\n\nconst resize = () => {\n  const closer = document.body.querySelector(CLOSE_BUTTON);\n\n  if (isActive() && closer && closer.getBoundingClientRect().width === 0) {\n    // When the mobile nav is active, and the close box isn't visible,\n    // we know the user's viewport has been resized to be larger.\n    // Let's make the page state consistent by deactivating the mobile nav.\n    navigation.toggleNav.call(closer, false);\n  }\n};\n\nconst onMenuClose = () => navigation.toggleNav.call(navigation, false);\n\nconst hideActiveNavDropdown = () => {\n  if (!navActive) {\n    return;\n  }\n\n  toggle(navActive, false);\n  navActive = null;\n};\n\nconst focusNavButton = event => {\n  const parentNavItem = event.target.closest(NAV_PRIMARY_ITEM); // Only shift focus if within dropdown\n\n  if (!event.target.matches(NAV_CONTROL)) {\n    parentNavItem.querySelector(NAV_CONTROL).focus();\n  }\n};\n\nconst handleEscape = event => {\n  hideActiveNavDropdown();\n  focusNavButton(event);\n};\n\nnavigation = behavior({\n  [CLICK]: {\n    [NAV_CONTROL]() {\n      // If another nav is open, close it\n      if (navActive !== this) {\n        hideActiveNavDropdown();\n      } // store a reference to the last clicked nav link element, so we\n      // can hide the dropdown if another element on the page is clicked\n\n\n      if (!navActive) {\n        navActive = this;\n        toggle(navActive, true);\n      } // Do this so the event handler on the body doesn't fire\n\n\n      return false;\n    },\n\n    [BODY]: hideActiveNavDropdown,\n    [OPENERS]: toggleNav,\n    [CLOSERS]: toggleNav,\n\n    [NAV_LINKS]() {\n      // A navigation link has been clicked! We want to collapse any\n      // hierarchical navigation UI it's a part of, so that the user\n      // can focus on whatever they've just selected.\n      // Some navigation links are inside accordions; when they're\n      // clicked, we want to collapse those accordions.\n      const acc = this.closest(accordion.ACCORDION);\n\n      if (acc) {\n        accordion.getButtons(acc).forEach(btn => accordion.hide(btn));\n      } // If the mobile navigation menu is active, we want to hide it.\n\n\n      if (isActive()) {\n        navigation.toggleNav.call(navigation, false);\n      }\n    }\n\n  },\n  keydown: {\n    [NAV_PRIMARY]: keymap({\n      Escape: handleEscape\n    })\n  },\n  focusout: {\n    [NAV_PRIMARY](event) {\n      const nav = event.target.closest(NAV_PRIMARY);\n\n      if (!nav.contains(event.relatedTarget)) {\n        hideActiveNavDropdown();\n      }\n    }\n\n  }\n}, {\n  init(root) {\n    const trapContainer = root.querySelector(NAV);\n\n    if (trapContainer) {\n      navigation.focusTrap = FocusTrap(trapContainer, {\n        Escape: onMenuClose\n      });\n    }\n\n    resize();\n    window.addEventListener(\"resize\", resize, false);\n  },\n\n  teardown() {\n    window.removeEventListener(\"resize\", resize, false);\n    navActive = false;\n  },\n\n  focusTrap: null,\n  toggleNav\n});\nmodule.exports = navigation;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/components/navigation.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/config.js":
/*!*********************************************!*\
  !*** ./node_modules/uswds/src/js/config.js ***!
  \*********************************************/
/***/ (function(module) {

eval("module.exports = {\n  prefix: \"usa\"\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/config.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/events.js":
/*!*********************************************!*\
  !*** ./node_modules/uswds/src/js/events.js ***!
  \*********************************************/
/***/ (function(module) {

eval("module.exports = {\n  // This used to be conditionally dependent on whether the\n  // browser supported touch events; if it did, `CLICK` was set to\n  // `touchstart`.  However, this had downsides:\n  //\n  // * It pre-empted mobile browsers' default behavior of detecting\n  //   whether a touch turned into a scroll, thereby preventing\n  //   users from using some of our components as scroll surfaces.\n  //\n  // * Some devices, such as the Microsoft Surface Pro, support *both*\n  //   touch and clicks. This meant the conditional effectively dropped\n  //   support for the user's mouse, frustrating users who preferred\n  //   it on those systems.\n  CLICK: \"click\"\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/events.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/active-element.js":
/*!***********************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/active-element.js ***!
  \***********************************************************/
/***/ (function(module) {

eval("module.exports = (htmlDocument = document) => htmlDocument.activeElement;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/active-element.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/behavior.js":
/*!*****************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/behavior.js ***!
  \*****************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\nconst Behavior = __webpack_require__(/*! receptor/behavior */ \"./node_modules/receptor/behavior/index.js\");\n/**\n * @name sequence\n * @param {...Function} seq an array of functions\n * @return { closure } callHooks\n */\n// We use a named function here because we want it to inherit its lexical scope\n// from the behavior props object, not from the module\n\n\nconst sequence = (...seq) => function callHooks(target = document.body) {\n  seq.forEach(method => {\n    if (typeof this[method] === \"function\") {\n      this[method].call(this, target);\n    }\n  });\n};\n/**\n * @name behavior\n * @param {object} events\n * @param {object?} props\n * @return {receptor.behavior}\n */\n\n\nmodule.exports = (events, props) => Behavior(events, assign({\n  on: sequence(\"init\", \"add\"),\n  off: sequence(\"teardown\", \"remove\")\n}, props));\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/behavior.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/focus-trap.js":
/*!*******************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/focus-trap.js ***!
  \*******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("const assign = __webpack_require__(/*! object-assign */ \"./node_modules/object-assign/index.js\");\n\nconst {\n  keymap\n} = __webpack_require__(/*! receptor */ \"./node_modules/receptor/index.js\");\n\nconst behavior = __webpack_require__(/*! ./behavior */ \"./node_modules/uswds/src/js/utils/behavior.js\");\n\nconst select = __webpack_require__(/*! ./select */ \"./node_modules/uswds/src/js/utils/select.js\");\n\nconst activeElement = __webpack_require__(/*! ./active-element */ \"./node_modules/uswds/src/js/utils/active-element.js\");\n\nconst FOCUSABLE = 'a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, [tabindex=\"0\"], [contenteditable]';\n\nconst tabHandler = context => {\n  const focusableElements = select(FOCUSABLE, context);\n  const firstTabStop = focusableElements[0];\n  const lastTabStop = focusableElements[focusableElements.length - 1]; // Special rules for when the user is tabbing forward from the last focusable element,\n  // or when tabbing backwards from the first focusable element\n\n  function tabAhead(event) {\n    if (activeElement() === lastTabStop) {\n      event.preventDefault();\n      firstTabStop.focus();\n    }\n  }\n\n  function tabBack(event) {\n    if (activeElement() === firstTabStop) {\n      event.preventDefault();\n      lastTabStop.focus();\n    } // This checks if you want to set the initial focus to a container\n    // instead of an element within, and the user tabs back. \n    // Then we set the focus to the first\n    else if (!focusableElements.includes(activeElement())) {\n        event.preventDefault();\n        firstTabStop.focus();\n      }\n  }\n\n  return {\n    firstTabStop,\n    lastTabStop,\n    tabAhead,\n    tabBack\n  };\n};\n\nmodule.exports = (context, additionalKeyBindings = {}) => {\n  const tabEventHandler = tabHandler(context);\n  const bindings = additionalKeyBindings;\n  const {\n    Esc,\n    Escape\n  } = bindings;\n  if (Escape && !Esc) bindings.Esc = Escape; //  TODO: In the future, loop over additional keybindings and pass an array\n  // of functions, if necessary, to the map keys. Then people implementing\n  // the focus trap could pass callbacks to fire when tabbing\n\n  const keyMappings = keymap(assign({\n    Tab: tabEventHandler.tabAhead,\n    \"Shift+Tab\": tabEventHandler.tabBack\n  }, additionalKeyBindings));\n  const focusTrap = behavior({\n    keydown: keyMappings\n  }, {\n    init() {\n      // TODO: is this desireable behavior? Should the trap always do this by default or should\n      // the component getting decorated handle this?\n      if (tabEventHandler.firstTabStop) {\n        tabEventHandler.firstTabStop.focus();\n      }\n    },\n\n    update(isActive) {\n      if (isActive) {\n        this.on();\n      } else {\n        this.off();\n      }\n    }\n\n  });\n  return focusTrap;\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/focus-trap.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/is-in-viewport.js":
/*!***********************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/is-in-viewport.js ***!
  \***********************************************************/
/***/ (function(module) {

eval("// https://stackoverflow.com/a/7557433\nfunction isElementInViewport(el, win = window, docEl = document.documentElement) {\n  const rect = el.getBoundingClientRect();\n  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (win.innerHeight || docEl.clientHeight) && rect.right <= (win.innerWidth || docEl.clientWidth);\n}\n\nmodule.exports = isElementInViewport;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/is-in-viewport.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/is-ios-device.js":
/*!**********************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/is-ios-device.js ***!
  \**********************************************************/
/***/ (function(module) {

eval("// iOS detection from: http://stackoverflow.com/a/9039885/177710\nfunction isIosDevice() {\n  return typeof navigator !== \"undefined\" && (navigator.userAgent.match(/(iPod|iPhone|iPad)/g) || navigator.platform === \"MacIntel\" && navigator.maxTouchPoints > 1) && !window.MSStream;\n}\n\nmodule.exports = isIosDevice;\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/is-ios-device.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/sanitizer.js":
/*!******************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/sanitizer.js ***!
  \******************************************************/
/***/ (function(module) {

eval("/* eslint-disable */\n\n/* globals define, module */\n\n/**\n * A simple library to help you escape HTML using template strings.\n *\n * It's the counterpart to our eslint \"no-unsafe-innerhtml\" plugin that helps us\n * avoid unsafe coding practices.\n * A full write-up of the Hows and Whys are documented\n * for developers at\n *  https://developer.mozilla.org/en-US/Firefox_OS/Security/Security_Automation\n * with additional background information and design docs at\n *  https://wiki.mozilla.org/User:Fbraun/Gaia/SafeinnerHTMLRoadmap\n *\n */\n!function (factory) {\n  module.exports = factory();\n}(function () {\n  'use strict';\n\n  var Sanitizer = {\n    _entity: /[&<>\"'/]/g,\n    _entities: {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&apos;',\n      '/': '&#x2F;'\n    },\n    getEntity: function (s) {\n      return Sanitizer._entities[s];\n    },\n\n    /**\n     * Escapes HTML for all values in a tagged template string.\n     */\n    escapeHTML: function (strings) {\n      var result = '';\n\n      for (var i = 0; i < strings.length; i++) {\n        result += strings[i];\n\n        if (i + 1 < arguments.length) {\n          var value = arguments[i + 1] || '';\n          result += String(value).replace(Sanitizer._entity, Sanitizer.getEntity);\n        }\n      }\n\n      return result;\n    },\n\n    /**\n     * Escapes HTML and returns a wrapped object to be used during DOM insertion\n     */\n    createSafeHTML: function (strings) {\n      var _len = arguments.length;\n      var values = new Array(_len > 1 ? _len - 1 : 0);\n\n      for (var _key = 1; _key < _len; _key++) {\n        values[_key - 1] = arguments[_key];\n      }\n\n      var escaped = Sanitizer.escapeHTML.apply(Sanitizer, [strings].concat(values));\n      return {\n        __html: escaped,\n        toString: function () {\n          return '[object WrappedHTMLObject]';\n        },\n        info: 'This is a wrapped HTML object. See https://developer.mozilla.or' + 'g/en-US/Firefox_OS/Security/Security_Automation for more.'\n      };\n    },\n\n    /**\n     * Unwrap safe HTML created by createSafeHTML or a custom replacement that\n     * underwent security review.\n     */\n    unwrapSafeHTML: function () {\n      var _len = arguments.length;\n      var htmlObjects = new Array(_len);\n\n      for (var _key = 0; _key < _len; _key++) {\n        htmlObjects[_key] = arguments[_key];\n      }\n\n      var markupList = htmlObjects.map(function (obj) {\n        return obj.__html;\n      });\n      return markupList.join('');\n    }\n  };\n  return Sanitizer;\n});\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/sanitizer.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/scrollbar-width.js":
/*!************************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/scrollbar-width.js ***!
  \************************************************************/
/***/ (function(module) {

eval("module.exports = function getScrollbarWidth() {\n  // Creating invisible container\n  const outer = document.createElement('div');\n  outer.style.visibility = 'hidden';\n  outer.style.overflow = 'scroll'; // forcing scrollbar to appear\n\n  outer.style.msOverflowStyle = 'scrollbar'; // needed for WinJS apps\n\n  document.body.appendChild(outer); // Creating inner element and placing it in the container\n\n  const inner = document.createElement('div');\n  outer.appendChild(inner); // Calculating difference between container's full width and the child width\n\n  const scrollbarWidth = `${outer.offsetWidth - inner.offsetWidth}px`; // Removing temporary elements from the DOM\n\n  outer.parentNode.removeChild(outer);\n  return scrollbarWidth;\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/scrollbar-width.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/select.js":
/*!***************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/select.js ***!
  \***************************************************/
/***/ (function(module) {

eval("/**\n * @name isElement\n * @desc returns whether or not the given argument is a DOM element.\n * @param {any} value\n * @return {boolean}\n */\nconst isElement = value => value && typeof value === \"object\" && value.nodeType === 1;\n/**\n * @name select\n * @desc selects elements from the DOM by class selector or ID selector.\n * @param {string} selector - The selector to traverse the DOM with.\n * @param {Document|HTMLElement?} context - The context to traverse the DOM\n *   in. If not provided, it defaults to the document.\n * @return {HTMLElement[]} - An array of DOM nodes or an empty array.\n */\n\n\nmodule.exports = (selector, context) => {\n  if (typeof selector !== \"string\") {\n    return [];\n  }\n\n  if (!context || !isElement(context)) {\n    context = window.document; // eslint-disable-line no-param-reassign\n  }\n\n  const selection = context.querySelectorAll(selector);\n  return Array.prototype.slice.call(selection);\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/select.js?");

/***/ }),

/***/ "./node_modules/uswds/src/js/utils/toggle.js":
/*!***************************************************!*\
  !*** ./node_modules/uswds/src/js/utils/toggle.js ***!
  \***************************************************/
/***/ (function(module) {

eval("const EXPANDED = \"aria-expanded\";\nconst CONTROLS = \"aria-controls\";\nconst HIDDEN = \"hidden\";\n\nmodule.exports = (button, expanded) => {\n  let safeExpanded = expanded;\n\n  if (typeof safeExpanded !== \"boolean\") {\n    safeExpanded = button.getAttribute(EXPANDED) === \"false\";\n  }\n\n  button.setAttribute(EXPANDED, safeExpanded);\n  const id = button.getAttribute(CONTROLS);\n  const controls = document.getElementById(id);\n\n  if (!controls) {\n    throw new Error(`No toggle target found with id: \"${id}\"`);\n  }\n\n  if (safeExpanded) {\n    controls.removeAttribute(HIDDEN);\n  } else {\n    controls.setAttribute(HIDDEN, \"\");\n  }\n\n  return safeExpanded;\n};\n\n//# sourceURL=webpack://identity-site/./node_modules/uswds/src/js/utils/toggle.js?");

/***/ }),

/***/ "./node_modules/element-closest/element-closest.js":
/*!*********************************************************!*\
  !*** ./node_modules/element-closest/element-closest.js ***!
  \*********************************************************/
/***/ (function() {

eval("// element-closest | CC0-1.0 | github.com/jonathantneal/closest\n\n(function (ElementProto) {\n\tif (typeof ElementProto.matches !== 'function') {\n\t\tElementProto.matches = ElementProto.msMatchesSelector || ElementProto.mozMatchesSelector || ElementProto.webkitMatchesSelector || function matches(selector) {\n\t\t\tvar element = this;\n\t\t\tvar elements = (element.document || element.ownerDocument).querySelectorAll(selector);\n\t\t\tvar index = 0;\n\n\t\t\twhile (elements[index] && elements[index] !== element) {\n\t\t\t\t++index;\n\t\t\t}\n\n\t\t\treturn Boolean(elements[index]);\n\t\t};\n\t}\n\n\tif (typeof ElementProto.closest !== 'function') {\n\t\tElementProto.closest = function closest(selector) {\n\t\t\tvar element = this;\n\n\t\t\twhile (element && element.nodeType === 1) {\n\t\t\t\tif (element.matches(selector)) {\n\t\t\t\t\treturn element;\n\t\t\t\t}\n\n\t\t\t\telement = element.parentNode;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t};\n\t}\n})(window.Element.prototype);\n\n\n//# sourceURL=webpack://identity-site/./node_modules/element-closest/element-closest.js?");

/***/ }),

/***/ "./node_modules/keyboardevent-key-polyfill/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/keyboardevent-key-polyfill/index.js ***!
  \**********************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/* global define, KeyboardEvent, module */\n\n(function () {\n\n  var keyboardeventKeyPolyfill = {\n    polyfill: polyfill,\n    keys: {\n      3: 'Cancel',\n      6: 'Help',\n      8: 'Backspace',\n      9: 'Tab',\n      12: 'Clear',\n      13: 'Enter',\n      16: 'Shift',\n      17: 'Control',\n      18: 'Alt',\n      19: 'Pause',\n      20: 'CapsLock',\n      27: 'Escape',\n      28: 'Convert',\n      29: 'NonConvert',\n      30: 'Accept',\n      31: 'ModeChange',\n      32: ' ',\n      33: 'PageUp',\n      34: 'PageDown',\n      35: 'End',\n      36: 'Home',\n      37: 'ArrowLeft',\n      38: 'ArrowUp',\n      39: 'ArrowRight',\n      40: 'ArrowDown',\n      41: 'Select',\n      42: 'Print',\n      43: 'Execute',\n      44: 'PrintScreen',\n      45: 'Insert',\n      46: 'Delete',\n      48: ['0', ')'],\n      49: ['1', '!'],\n      50: ['2', '@'],\n      51: ['3', '#'],\n      52: ['4', '$'],\n      53: ['5', '%'],\n      54: ['6', '^'],\n      55: ['7', '&'],\n      56: ['8', '*'],\n      57: ['9', '('],\n      91: 'OS',\n      93: 'ContextMenu',\n      144: 'NumLock',\n      145: 'ScrollLock',\n      181: 'VolumeMute',\n      182: 'VolumeDown',\n      183: 'VolumeUp',\n      186: [';', ':'],\n      187: ['=', '+'],\n      188: [',', '<'],\n      189: ['-', '_'],\n      190: ['.', '>'],\n      191: ['/', '?'],\n      192: ['`', '~'],\n      219: ['[', '{'],\n      220: ['\\\\', '|'],\n      221: [']', '}'],\n      222: [\"'\", '\"'],\n      224: 'Meta',\n      225: 'AltGraph',\n      246: 'Attn',\n      247: 'CrSel',\n      248: 'ExSel',\n      249: 'EraseEof',\n      250: 'Play',\n      251: 'ZoomOut'\n    }\n  };\n\n  // Function keys (F1-24).\n  var i;\n  for (i = 1; i < 25; i++) {\n    keyboardeventKeyPolyfill.keys[111 + i] = 'F' + i;\n  }\n\n  // Printable ASCII characters.\n  var letter = '';\n  for (i = 65; i < 91; i++) {\n    letter = String.fromCharCode(i);\n    keyboardeventKeyPolyfill.keys[i] = [letter.toLowerCase(), letter.toUpperCase()];\n  }\n\n  function polyfill () {\n    if (!('KeyboardEvent' in window) ||\n        'key' in KeyboardEvent.prototype) {\n      return false;\n    }\n\n    // Polyfill `key` on `KeyboardEvent`.\n    var proto = {\n      get: function (x) {\n        var key = keyboardeventKeyPolyfill.keys[this.which || this.keyCode];\n\n        if (Array.isArray(key)) {\n          key = key[+this.shiftKey];\n        }\n\n        return key;\n      }\n    };\n    Object.defineProperty(KeyboardEvent.prototype, 'key', proto);\n    return proto;\n  }\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (keyboardeventKeyPolyfill),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n\n})();\n\n\n//# sourceURL=webpack://identity-site/./node_modules/keyboardevent-key-polyfill/index.js?");

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/***/ (function(module) {

"use strict";
eval("/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n\n\n//# sourceURL=webpack://identity-site/./node_modules/object-assign/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	!function() {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = function(module) {
/******/ 			var getter = module && module.__esModule ?
/******/ 				function() { return module['default']; } :
/******/ 				function() { return module; };
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/js/main.js");
/******/ 	
/******/ })()
;